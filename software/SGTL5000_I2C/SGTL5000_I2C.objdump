
SGTL5000_I2C.elf:     file format elf32-littlenios2
SGTL5000_I2C.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004180

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x00002750 memsz 0x00002750 flags r-x
    LOAD off    0x00003770 vaddr 0x00006770 paddr 0x000068a0 align 2**12
         filesz 0x00000130 memsz 0x00000130 flags rw-
    LOAD off    0x000039d0 vaddr 0x000069d0 paddr 0x000069d0 align 2**12
         filesz 0x00000000 memsz 0x0000011c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002404  00004180  00004180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000001ec  00006584  00006584  00003584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000130  00006770  000068a0  00003770  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000011c  000069d0  000069d0  000039d0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00006aec  00006aec  000038a0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000038a0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000478  00000000  00000000  000038c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000073a1  00000000  00000000  00003d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000023a6  00000000  00000000  0000b0e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002655  00000000  00000000  0000d487  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000a7c  00000000  00000000  0000fadc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000021f4  00000000  00000000  00010558  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00002fbd  00000000  00000000  0001274c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0001570c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000340  00000000  00000000  00015750  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001772a  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0001772d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00017739  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001773a  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001773b  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001773f  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00017743  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00017747  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00017752  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0001775d  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000005  00000000  00000000  00017768  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000003b  00000000  00000000  0001776d  2**0
                  CONTENTS, READONLY
 29 .jdi          00006083  00000000  00000000  000177a8  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00067856  00000000  00000000  0001d82b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .exceptions	00000000 .exceptions
00004180 l    d  .text	00000000 .text
00006584 l    d  .rodata	00000000 .rodata
00006770 l    d  .rwdata	00000000 .rwdata
000069d0 l    d  .bss	00000000 .bss
00006aec l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../SGTL5000_I2C_bsp//obj/HAL/src/crt0.o
000041b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 sgtl5000.c
00000000 l    df *ABS*	00000000 sgtl5000_test.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000046b0 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00006770 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00006850 l     O .rwdata	00000038 i2c_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
0000597c l     F .text	000000b8 optional_irq_callback
000058d4 l     F .text	00000060 alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcmp.c
000069e8 g     O .bss	00000004 alt_instruction_exception_handler
00005030 g     F .text	0000002c alt_main
00004600 g     F .text	00000080 _puts_r
000069ec g     O .bss	00000100 alt_irq
000068a0 g       *ABS*	00000000 __flash_rwdata_start
000045b4 g     F .text	0000004c printf
0000533c g     F .text	00000080 alt_avalon_i2c_rx_read
00005874 g     F .text	00000014 alt_avalon_i2c_enabled_ints_get
0000521c g     F .text	0000004c alt_avalon_i2c_master_config_speed_get
00005ec8 g     F .text	0000017c alt_avalon_i2c_master_transmit_using_interrupts
000064d8 g     F .text	00000008 altera_nios2_gen2_irq_init
00004000 g     F .entry	0000000c __reset
00004020 g       *ABS*	00000000 __flash_exceptions_start
000069d0 g     O .bss	00000004 errno
000069d8 g     O .bss	00000004 alt_argv
0000e888 g       *ABS*	00000000 _gp
00005b20 g     F .text	00000018 alt_avalon_i2c_rx_fifo_threshold_get
000052f4 g     F .text	00000010 alt_avalon_i2c_is_busy
000051c4 g     F .text	00000058 alt_avalon_i2c_master_config_set
0000636c g     F .text	00000074 alt_find_dev
00005548 g     F .text	00000144 alt_avalon_i2c_master_transmit
00004680 g     F .text	00000014 puts
000064e0 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00004578 g     F .text	0000003c _printf_r
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00004e6c g     F .text	00000064 .hidden __udivsi3
0000511c g     F .text	00000048 alt_avalon_i2c_enable
00005888 g     F .text	0000004c alt_avalon_i2c_int_disable
000041bc g     F .text	0000006c SGTL5000_Reg_Rd
0000568c g     F .text	000001b4 alt_avalon_i2c_master_receive
00005934 g     F .text	00000048 alt_avalon_i2c_int_enable
00006888 g     O .rwdata	00000004 _global_impure_ptr
00006aec g       *ABS*	00000000 __bss_end
00006470 g     F .text	00000068 alt_iic_isr_register
00005840 g     F .text	00000018 alt_avalon_i2c_int_status_get
00006458 g     F .text	00000018 alt_ic_irq_enabled
00005104 g     F .text	00000010 alt_avalon_i2c_register_callback
000069e4 g     O .bss	00000004 alt_irq_active
00005e18 g     F .text	000000b0 alt_avalon_i2c_init
000040fc g     F .exceptions	00000060 alt_irq_handler
000062fc g     F .text	00000004 alt_dcache_flush_all
000068a0 g       *ABS*	00000000 __ram_rwdata_end
0000505c g     F .text	00000060 write
000053ec g     F .text	0000001c alt_avalon_i2c_check_arblost
00005868 g     F .text	0000000c alt_avalon_i2c_int_clear
00006770 g       *ABS*	00000000 __ram_rodata_end
000069e0 g     O .bss	00000004 jtag_uart_0
00006890 g     O .rwdata	00000008 alt_avalon_i2c_list
00004ed0 g     F .text	00000058 .hidden __umodsi3
00006aec g       *ABS*	00000000 end
0000415c g     F .exceptions	00000024 alt_instruction_exception_entry
00005114 g     F .text	00000008 alt_avalon_i2c_open
00007000 g       *ABS*	00000000 __alt_stack_pointer
00006044 g     F .text	000000c4 alt_avalon_i2c_master_tx
00006240 g     F .text	00000034 altera_avalon_jtag_uart_write
0000471c g     F .text	0000052c ___vfprintf_internal_r
000050e8 g     F .text	0000001c alt_avalon_i2c_register_optional_irq_handler
00004180 g     F .text	0000003c _start
00005b60 g     F .text	0000018c alt_avalon_i2c_master_receive_using_interrupts
00005b38 g     F .text	00000028 alt_avalon_i2c_rx_fifo_threshold_set
000050dc g     F .text	0000000c alt_sys_init
00006108 g     F .text	00000138 alt_avalon_i2c_master_tx_rx
00004f28 g     F .text	00000028 .hidden __mulsi3
00006770 g       *ABS*	00000000 __ram_rwdata_start
00006584 g       *ABS*	00000000 __ram_rodata_start
00006274 g     F .text	00000088 alt_busy_sleep
00006554 g     F .text	00000030 memcmp
00005304 g     F .text	00000038 alt_avalon_i2c_rx_read_available
00006aec g       *ABS*	00000000 __alt_stack_base
00006300 g     F .text	0000006c alt_dev_llist_insert
00005a34 g     F .text	000000ec alt_avalon_i2c_interrupt_transaction_status
000053d0 g     F .text	0000001c alt_avalon_i2c_check_nack
00004c64 g     F .text	000000b8 __sfvwrite_small_dev
000069d0 g       *ABS*	00000000 __bss_start
00004298 g     F .text	000002e0 main
000053c8 g     F .text	00000008 alt_avalon_i2c_master_target_set
000069d4 g     O .bss	00000004 alt_envp
00005858 g     F .text	00000010 alt_avalon_i2c_int_raw_status_get
00006898 g     O .rwdata	00000004 alt_errno
00004d74 g     F .text	00000084 .hidden __divsi3
00006584 g       *ABS*	00000000 __flash_rodata_start
00004228 g     F .text	00000070 SGTL5000_Reg_Wr
000050bc g     F .text	00000020 alt_irq_init
00004d1c g     F .text	00000058 _write_r
0000688c g     O .rwdata	00000004 _impure_ptr
000069dc g     O .bss	00000004 alt_argc
000053bc g     F .text	0000000c alt_avalon_i2c_master_target_get
000054d0 g     F .text	00000078 alt_avalon_i2c_send_address
00004020 g       .exceptions	00000000 alt_irq_entry
00004020 g       *ABS*	00000000 __ram_exceptions_start
00005dec g     F .text	0000002c alt_avalon_i2c_tfr_cmd_fifo_threshold_set
000063e4 g     F .text	00000004 alt_ic_isr_register
00005164 g     F .text	0000001c alt_avalon_i2c_disable
000068a0 g       *ABS*	00000000 _edata
00006aec g       *ABS*	00000000 _end
00004180 g       *ABS*	00000000 __ram_exceptions_end
00005180 g     F .text	00000044 alt_avalon_i2c_master_config_get
00006420 g     F .text	00000038 alt_ic_irq_disable
00004df8 g     F .text	00000074 .hidden __modsi3
00007000 g       *ABS*	00000000 __alt_data_end
00004020 g     F .exceptions	00000000 alt_exception
00005268 g     F .text	0000008c alt_avalon_i2c_master_config_speed_set
00005408 g     F .text	000000c8 alt_avalon_i2c_cmd_write
0000400c g       .entry	00000000 _exit
00004694 g     F .text	0000001c strlen
000063e0 g     F .text	00000004 alt_icache_flush_all
0000689c g     O .rwdata	00000004 alt_priority_mask
000063e8 g     F .text	00000038 alt_ic_irq_enable
00004c48 g     F .text	0000001c __vfprintf_internal
00005dd4 g     F .text	00000018 alt_avalon_i2c_tfr_cmd_fifo_threshold_get
00004f50 g     F .text	000000e0 alt_load
00005cec g     F .text	000000e8 alt_avalon_i2c_master_rx



Disassembly of section .entry:

00004000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4004:	08506014 	ori	at,at,16768
    jmp r1
    4008:	0800683a 	jmp	at

0000400c <_exit>:
	...

Disassembly of section .exceptions:

00004020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    4020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    4024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    4028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    4030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    4034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    4038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    4040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    4044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    4048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    4050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    4054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    4058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    4060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    4064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    4068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    4070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    4074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    4078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    407c:	10000326 	beq	r2,zero,408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    4080:	20000226 	beq	r4,zero,408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    4084:	00040fc0 	call	40fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    4088:	00000706 	br	40a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    408c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    4090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    4094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    4098:	000415c0 	call	415c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    409c:	1000021e 	bne	r2,zero,40a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    40a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    40a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    40a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    40ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    40b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    40b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    40b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    40bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    40c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    40c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    40c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    40cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    40d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    40d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    40d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    40dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    40e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    40e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    40e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    40ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    40f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    40f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    40f8:	ef80083a 	eret

000040fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    40fc:	defffe04 	addi	sp,sp,-8
    4100:	dfc00115 	stw	ra,4(sp)
    4104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    4108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    410c:	04000034 	movhi	r16,0
    4110:	841a7b04 	addi	r16,r16,27116

  active = alt_irq_pending ();

  do
  {
    i = 0;
    4114:	0005883a 	mov	r2,zero
    mask = 1;
    4118:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    411c:	20ca703a 	and	r5,r4,r3
    4120:	28000b26 	beq	r5,zero,4150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    4124:	100490fa 	slli	r2,r2,3
    4128:	8085883a 	add	r2,r16,r2
    412c:	10c00017 	ldw	r3,0(r2)
    4130:	11000117 	ldw	r4,4(r2)
    4134:	183ee83a 	callr	r3
    4138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
    413c:	203ff51e 	bne	r4,zero,4114 <_gp+0xffff588c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    4140:	dfc00117 	ldw	ra,4(sp)
    4144:	dc000017 	ldw	r16,0(sp)
    4148:	dec00204 	addi	sp,sp,8
    414c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    4150:	18c7883a 	add	r3,r3,r3
      i++;
    4154:	10800044 	addi	r2,r2,1

    } while (1);
    4158:	003ff006 	br	411c <_gp+0xffff5894>

0000415c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    415c:	d0a05817 	ldw	r2,-32416(gp)
    4160:	10000426 	beq	r2,zero,4174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    4164:	200b883a 	mov	r5,r4
    4168:	000d883a 	mov	r6,zero
    416c:	013fffc4 	movi	r4,-1
    4170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    4174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
    4178:	0005883a 	mov	r2,zero
    417c:	f800283a 	ret

Disassembly of section .text:

00004180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4180:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    4184:	dedc0014 	ori	sp,sp,28672
    movhi gp, %hi(_gp)
    4188:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    418c:	d6ba2214 	ori	gp,gp,59528
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    4190:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    4194:	109a7414 	ori	r2,r2,27088

    movhi r3, %hi(__bss_end)
    4198:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    419c:	18dabb14 	ori	r3,r3,27372

    beq r2, r3, 1f
    41a0:	10c00326 	beq	r2,r3,41b0 <_start+0x30>

0:
    stw zero, (r2)
    41a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    41a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    41ac:	10fffd36 	bltu	r2,r3,41a4 <_gp+0xffff591c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    41b0:	0004f500 	call	4f50 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    41b4:	00050300 	call	5030 <alt_main>

000041b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    41b8:	003fff06 	br	41b8 <_gp+0xffff5930>

000041bc <SGTL5000_Reg_Rd>:
#include "sgtl5000.h"
#include "altera_avalon_i2c.h"
#include "altera_avalon_i2c_regs.h"

WORD SGTL5000_Reg_Rd (ALT_AVALON_I2C_DEV_t* dev, WORD ADDR)
{
    41bc:	defffb04 	addi	sp,sp,-20
    41c0:	dc000315 	stw	r16,12(sp)
	BYTE buffer[2];
	WORD value;
	buffer[0] = (ADDR & 0xFF00) >> 8;
    41c4:	2c3fffcc 	andi	r16,r5,65535
    41c8:	8004d23a 	srli	r2,r16,8
	buffer[1] = (ADDR & 0x00FF);

	ALT_AVALON_I2C_STATUS_CODE status=alt_avalon_i2c_master_tx_rx(dev,buffer,2,buffer,2,0);
    41cc:	01800084 	movi	r6,2
    41d0:	d9c00204 	addi	r7,sp,8
WORD SGTL5000_Reg_Rd (ALT_AVALON_I2C_DEV_t* dev, WORD ADDR)
{
	BYTE buffer[2];
	WORD value;
	buffer[0] = (ADDR & 0xFF00) >> 8;
	buffer[1] = (ADDR & 0x00FF);
    41d4:	d9400245 	stb	r5,9(sp)

	ALT_AVALON_I2C_STATUS_CODE status=alt_avalon_i2c_master_tx_rx(dev,buffer,2,buffer,2,0);
    41d8:	d8000115 	stw	zero,4(sp)
    41dc:	d9800015 	stw	r6,0(sp)
    41e0:	380b883a 	mov	r5,r7
#include "sgtl5000.h"
#include "altera_avalon_i2c.h"
#include "altera_avalon_i2c_regs.h"

WORD SGTL5000_Reg_Rd (ALT_AVALON_I2C_DEV_t* dev, WORD ADDR)
{
    41e4:	dfc00415 	stw	ra,16(sp)
	BYTE buffer[2];
	WORD value;
	buffer[0] = (ADDR & 0xFF00) >> 8;
    41e8:	d8800205 	stb	r2,8(sp)
	buffer[1] = (ADDR & 0x00FF);

	ALT_AVALON_I2C_STATUS_CODE status=alt_avalon_i2c_master_tx_rx(dev,buffer,2,buffer,2,0);
    41ec:	00061080 	call	6108 <alt_avalon_i2c_master_tx_rx>

	if (status != ALT_AVALON_I2C_SUCCESS){
    41f0:	10000526 	beq	r2,zero,4208 <SGTL5000_Reg_Rd+0x4c>
		printf ("SGTL5000 I2C error, address: %x", ADDR);
    41f4:	01000034 	movhi	r4,0
    41f8:	800b883a 	mov	r5,r16
    41fc:	21196104 	addi	r4,r4,25988
    4200:	00045b40 	call	45b4 <printf>
    4204:	003fff06 	br	4204 <_gp+0xffff597c>
		while (1)
		{
			//hang here
		}
	}
	value = (buffer[0] << 8) | buffer[1];
    4208:	d8800203 	ldbu	r2,8(sp)
    420c:	d8c00243 	ldbu	r3,9(sp)
    4210:	1004923a 	slli	r2,r2,8
	return value;
}
    4214:	10c4b03a 	or	r2,r2,r3
    4218:	dfc00417 	ldw	ra,16(sp)
    421c:	dc000317 	ldw	r16,12(sp)
    4220:	dec00504 	addi	sp,sp,20
    4224:	f800283a 	ret

00004228 <SGTL5000_Reg_Wr>:

WORD SGTL5000_Reg_Wr (ALT_AVALON_I2C_DEV_t* dev, WORD ADDR, WORD DATA)
{
    4228:	defffc04 	addi	sp,sp,-16
    422c:	dc400215 	stw	r17,8(sp)
	BYTE buffer[4];
	buffer[0] = (ADDR & 0xFF00) >> 8;
    4230:	2c7fffcc 	andi	r17,r5,65535
    4234:	8804d23a 	srli	r2,r17,8
	value = (buffer[0] << 8) | buffer[1];
	return value;
}

WORD SGTL5000_Reg_Wr (ALT_AVALON_I2C_DEV_t* dev, WORD ADDR, WORD DATA)
{
    4238:	dc000115 	stw	r16,4(sp)
	BYTE buffer[4];
	buffer[0] = (ADDR & 0xFF00) >> 8;
	buffer[1] = (ADDR & 0x00FF);
    423c:	d9400045 	stb	r5,1(sp)
}

WORD SGTL5000_Reg_Wr (ALT_AVALON_I2C_DEV_t* dev, WORD ADDR, WORD DATA)
{
	BYTE buffer[4];
	buffer[0] = (ADDR & 0xFF00) >> 8;
    4240:	d8800005 	stb	r2,0(sp)
	buffer[1] = (ADDR & 0x00FF);
	buffer[2] = (DATA & 0xFF00) >> 8;
    4244:	3004d23a 	srli	r2,r6,8
	value = (buffer[0] << 8) | buffer[1];
	return value;
}

WORD SGTL5000_Reg_Wr (ALT_AVALON_I2C_DEV_t* dev, WORD ADDR, WORD DATA)
{
    4248:	3021883a 	mov	r16,r6
	BYTE buffer[4];
	buffer[0] = (ADDR & 0xFF00) >> 8;
	buffer[1] = (ADDR & 0x00FF);
	buffer[2] = (DATA & 0xFF00) >> 8;
	buffer[3] = (DATA & 0x00FF);
    424c:	d98000c5 	stb	r6,3(sp)


	ALT_AVALON_I2C_STATUS_CODE status=alt_avalon_i2c_master_tx(dev,buffer,4,0);
    4250:	000f883a 	mov	r7,zero
    4254:	01800104 	movi	r6,4
    4258:	d80b883a 	mov	r5,sp
	value = (buffer[0] << 8) | buffer[1];
	return value;
}

WORD SGTL5000_Reg_Wr (ALT_AVALON_I2C_DEV_t* dev, WORD ADDR, WORD DATA)
{
    425c:	dfc00315 	stw	ra,12(sp)
	BYTE buffer[4];
	buffer[0] = (ADDR & 0xFF00) >> 8;
	buffer[1] = (ADDR & 0x00FF);
	buffer[2] = (DATA & 0xFF00) >> 8;
    4260:	d8800085 	stb	r2,2(sp)
	buffer[3] = (DATA & 0x00FF);


	ALT_AVALON_I2C_STATUS_CODE status=alt_avalon_i2c_master_tx(dev,buffer,4,0);
    4264:	00060440 	call	6044 <alt_avalon_i2c_master_tx>

	if (status != ALT_AVALON_I2C_SUCCESS){
    4268:	10000526 	beq	r2,zero,4280 <SGTL5000_Reg_Wr+0x58>
		printf ("SGTL5000 I2C error, address: %x", ADDR);
    426c:	01000034 	movhi	r4,0
    4270:	880b883a 	mov	r5,r17
    4274:	21196104 	addi	r4,r4,25988
    4278:	00045b40 	call	45b4 <printf>
    427c:	003fff06 	br	427c <_gp+0xffff59f4>
		{
			//hang here
		}
	}
	return DATA;
}
    4280:	8005883a 	mov	r2,r16
    4284:	dfc00317 	ldw	ra,12(sp)
    4288:	dc400217 	ldw	r17,8(sp)
    428c:	dc000117 	ldw	r16,4(sp)
    4290:	dec00404 	addi	sp,sp,16
    4294:	f800283a 	ret

00004298 <main>:

int main()
{
	ALT_AVALON_I2C_DEV_t *i2c_dev; //pointer to instance structure
	//get a pointer to the Avalon i2c instance
	i2c_dev = alt_avalon_i2c_open("/dev/i2c_0"); //this has to reflect Platform Designer name
    4298:	01000034 	movhi	r4,0
//	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
//}


int main()
{
    429c:	defff904 	addi	sp,sp,-28
	ALT_AVALON_I2C_DEV_t *i2c_dev; //pointer to instance structure
	//get a pointer to the Avalon i2c instance
	i2c_dev = alt_avalon_i2c_open("/dev/i2c_0"); //this has to reflect Platform Designer name
    42a0:	21196904 	addi	r4,r4,26020
//	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
//}


int main()
{
    42a4:	dfc00615 	stw	ra,24(sp)
    42a8:	dd400515 	stw	r21,20(sp)
    42ac:	dd000415 	stw	r20,16(sp)
    42b0:	dcc00315 	stw	r19,12(sp)
    42b4:	dc800215 	stw	r18,8(sp)
    42b8:	dc400115 	stw	r17,4(sp)
    42bc:	dc000015 	stw	r16,0(sp)
	ALT_AVALON_I2C_DEV_t *i2c_dev; //pointer to instance structure
	//get a pointer to the Avalon i2c instance
	i2c_dev = alt_avalon_i2c_open("/dev/i2c_0"); //this has to reflect Platform Designer name
    42c0:	00051140 	call	5114 <alt_avalon_i2c_open>
	if (NULL==i2c_dev)						     //check the BSP if unsure
    42c4:	10009f26 	beq	r2,zero,4544 <main+0x2ac>
	{
		printf("Error: Cannot find /dev/i2c_0\n");
		return 1;
	}
	printf ("I2C Test Program\n");
    42c8:	01000034 	movhi	r4,0
    42cc:	21197404 	addi	r4,r4,26064
    42d0:	1021883a 	mov	r16,r2
    42d4:	00046800 	call	4680 <puts>

	alt_avalon_i2c_master_target_set(i2c_dev,0xA); //CODEC at address 0b0001010
    42d8:	01400284 	movi	r5,10
    42dc:	8009883a 	mov	r4,r16
    42e0:	00053c80 	call	53c8 <alt_avalon_i2c_master_target_set>
	//print device ID (verify I2C is working)
	printf( "Device ID register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ID));
    42e4:	000b883a 	mov	r5,zero
    42e8:	8009883a 	mov	r4,r16
    42ec:	00041bc0 	call	41bc <SGTL5000_Reg_Rd>
    42f0:	01000034 	movhi	r4,0
    42f4:	117fffcc 	andi	r5,r2,65535
    42f8:	21197904 	addi	r4,r4,26084
    42fc:	00045b40 	call	45b4 <printf>

	//configure PLL, input frequency is 12.5 MHz, output frequency is 180.6336 MHz if 44.1kHz is desired
	//or 196.608 MHz else
	BYTE int_divisor = 180633600/12500000;
	WORD frac_divisor = (WORD)(((180633600.0f/12500000.0f) - (float)int_divisor) * 2048.0f);
	printf( "Programming PLL with integer divisor: %d, fractional divisor %d\n", int_divisor, frac_divisor);
    4300:	01000034 	movhi	r4,0
    4304:	0180e6c4 	movi	r6,923
    4308:	01400384 	movi	r5,14
    430c:	21197f04 	addi	r4,r4,26108
    4310:	00045b40 	call	45b4 <printf>
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_PLL_CTRL, \
    4314:	019ce6c4 	movi	r6,29595
    4318:	01400c84 	movi	r5,50
    431c:	8009883a 	mov	r4,r16
    4320:	00042280 	call	4228 <SGTL5000_Reg_Wr>
				int_divisor << SGTL5000_PLL_INT_DIV_SHIFT|
				frac_divisor << SGTL5000_PLL_FRAC_DIV_SHIFT);
	printf( "CHIP_PLL_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_PLL_CTRL));
    4324:	01400c84 	movi	r5,50
    4328:	8009883a 	mov	r4,r16
    432c:	00041bc0 	call	41bc <SGTL5000_Reg_Rd>
    4330:	01000034 	movhi	r4,0
    4334:	117fffcc 	andi	r5,r2,65535
    4338:	21199004 	addi	r4,r4,26176
    433c:	00045b40 	call	45b4 <printf>

	//configure power control, disable internal VDDD, VDDIO=3.3V, VDDA=VDDD=1.8V (ext)
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ANA_POWER, \
    4340:	01917f84 	movi	r6,17918
    4344:	01400c04 	movi	r5,48
    4348:	8009883a 	mov	r4,r16
    434c:	00042280 	call	4228 <SGTL5000_Reg_Wr>
			SGTL5000_REFTOP_POWERUP|
			SGTL5000_HP_POWERUP|
			SGTL5000_DAC_POWERUP|
			SGTL5000_CAPLESS_HP_POWERUP|
			SGTL5000_ADC_POWERUP);
	printf( "CHIP_ANA_POWER register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_POWER));
    4350:	01400c04 	movi	r5,48
    4354:	8009883a 	mov	r4,r16
    4358:	00041bc0 	call	41bc <SGTL5000_Reg_Rd>
    435c:	01000034 	movhi	r4,0
    4360:	117fffcc 	andi	r5,r2,65535
    4364:	21199704 	addi	r4,r4,26204
    4368:	00045b40 	call	45b4 <printf>

	//select internal ground bias to .9V (1.8V/2)
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_REF_CTRL, 0x004E);
    436c:	01801384 	movi	r6,78
    4370:	01400a04 	movi	r5,40
    4374:	8009883a 	mov	r4,r16
    4378:	00042280 	call	4228 <SGTL5000_Reg_Wr>
	printf( "CHIP_REF_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_REF_CTRL));
    437c:	01400a04 	movi	r5,40
    4380:	8009883a 	mov	r4,r16
    4384:	00041bc0 	call	41bc <SGTL5000_Reg_Rd>
    4388:	01000034 	movhi	r4,0
    438c:	117fffcc 	andi	r5,r2,65535
    4390:	21199f04 	addi	r4,r4,26236
    4394:	00045b40 	call	45b4 <printf>

	//enable core modules
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_DIG_POWER,\
    4398:	018018c4 	movi	r6,99
    439c:	01400084 	movi	r5,2
    43a0:	8009883a 	mov	r4,r16
    43a4:	00042280 	call	4228 <SGTL5000_Reg_Wr>
			SGTL5000_ADC_EN|
			SGTL5000_DAC_EN|
			//SGTL5000_DAP_POWERUP| //disable digital audio processor in CODEC
			SGTL5000_I2S_OUT_POWERUP|
			SGTL5000_I2S_IN_POWERUP);
	printf( "CHIP_DIG_POWER register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_DIG_POWER));
    43a8:	01400084 	movi	r5,2
    43ac:	8009883a 	mov	r4,r16
    43b0:	00041bc0 	call	41bc <SGTL5000_Reg_Rd>
    43b4:	01000034 	movhi	r4,0
    43b8:	117fffcc 	andi	r5,r2,65535
    43bc:	2119a604 	addi	r4,r4,26264
    43c0:	00045b40 	call	45b4 <printf>


	//MCLK is 12.5 MHz, configure clocks to use PLL
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_CLK_CTRL, \
    43c4:	018001c4 	movi	r6,7
    43c8:	01400104 	movi	r5,4
    43cc:	8009883a 	mov	r4,r16
    43d0:	00042280 	call	4228 <SGTL5000_Reg_Wr>
			SGTL5000_SYS_FS_44_1k << SGTL5000_SYS_FS_SHIFT |
			SGTL5000_MCLK_FREQ_PLL << SGTL5000_MCLK_FREQ_SHIFT);
	printf( "CHIP_CLK_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_CLK_CTRL));
    43d4:	01400104 	movi	r5,4
    43d8:	8009883a 	mov	r4,r16
    43dc:	00041bc0 	call	41bc <SGTL5000_Reg_Rd>
    43e0:	01000034 	movhi	r4,0
    43e4:	117fffcc 	andi	r5,r2,65535
    43e8:	2119ae04 	addi	r4,r4,26296
    43ec:	00045b40 	call	45b4 <printf>

	//note thata I2S mode is set by default (0 I2S mode, 0 LRalign)
	//note that SCLKFREQ is 64Fs by default
	//Set as I2S master
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_I2S_CTRL, \
    43f0:	01802c04 	movi	r6,176
    43f4:	01400184 	movi	r5,6
    43f8:	8009883a 	mov	r4,r16
    43fc:	00042280 	call	4228 <SGTL5000_Reg_Wr>
			SGTL5000_I2S_MASTER |
			(SGTL5000_I2S_DLEN_16 << SGTL5000_I2S_DLEN_SHIFT));
	//#define SGTL5000_I2S_DLEN_16			0x3
	//#define SGTL5000_I2S_DLEN_SHIFT			4
	//SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_I2S_CTRL, SGTL5000_I2S_MASTER);
	printf( "CHIP_I2S_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_I2S_CTRL));
    4400:	01400184 	movi	r5,6
    4404:	8009883a 	mov	r4,r16
    4408:	00041bc0 	call	41bc <SGTL5000_Reg_Rd>
    440c:	01000034 	movhi	r4,0
    4410:	117fffcc 	andi	r5,r2,65535
    4414:	2119b504 	addi	r4,r4,26324
    4418:	00045b40 	call	45b4 <printf>

	//ADC input from Line
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ANA_CTRL, \
    441c:	01800104 	movi	r6,4
    4420:	01400904 	movi	r5,36
    4424:	8009883a 	mov	r4,r16
    4428:	00042280 	call	4228 <SGTL5000_Reg_Wr>
	    //SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ANA_CTRL, \
	                SGTL5000_ADC_SEL_LINE_IN << SGTL5000_HP_SEL_SHIFT);
	//Line Passthrough to Headphones
	//SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ANA_CTRL, \
				SGTL5000_ADC_SEL_LINE_IN << SGTL5000_HP_SEL_SHIFT);
	printf( "CHIP_ANA_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_CTRL));
    442c:	01400904 	movi	r5,36
    4430:	8009883a 	mov	r4,r16
    4434:	00041bc0 	call	41bc <SGTL5000_Reg_Rd>
    4438:	01000034 	movhi	r4,0
    443c:	117fffcc 	andi	r5,r2,65535
    4440:	2119bc04 	addi	r4,r4,26352
    4444:	00045b40 	call	45b4 <printf>

	//ADC -> I2S out, I2S in -> DAC
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_SSS_CTRL, \
    4448:	01800404 	movi	r6,16
    444c:	01400284 	movi	r5,10
    4450:	8009883a 	mov	r4,r16
    4454:	00042280 	call	4228 <SGTL5000_Reg_Wr>
			SGTL5000_DAC_SEL_I2S_IN << SGTL5000_DAC_SEL_SHIFT |
			SGTL5000_I2S_OUT_SEL_ADC << SGTL5000_I2S_OUT_SEL_SHIFT);
	printf( "CHIP_SSS_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_SSS_CTRL));
    4458:	01400284 	movi	r5,10
    445c:	8009883a 	mov	r4,r16
    4460:	00041bc0 	call	41bc <SGTL5000_Reg_Rd>
    4464:	01000034 	movhi	r4,0
    4468:	117fffcc 	andi	r5,r2,65535
    446c:	2119c304 	addi	r4,r4,26380
    4470:	00045b40 	call	45b4 <printf>

	printf( "CHIP_ANA_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_CTRL));
    4474:	01400904 	movi	r5,36
    4478:	8009883a 	mov	r4,r16
    447c:	00041bc0 	call	41bc <SGTL5000_Reg_Rd>
    4480:	01000034 	movhi	r4,0
    4484:	117fffcc 	andi	r5,r2,65535
    4488:	2119bc04 	addi	r4,r4,26352
    448c:	00045b40 	call	45b4 <printf>

	//ADC -> I2S out, I2S in -> DAC
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ADCDAC_CTRL, 0x0000);
    4490:	000d883a 	mov	r6,zero
    4494:	01400384 	movi	r5,14
    4498:	8009883a 	mov	r4,r16
    449c:	00042280 	call	4228 <SGTL5000_Reg_Wr>
	printf( "CHIP_ADCDAC_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ADCDAC_CTRL));
    44a0:	01400384 	movi	r5,14
    44a4:	8009883a 	mov	r4,r16
    44a8:	00041bc0 	call	41bc <SGTL5000_Reg_Rd>
    44ac:	01000034 	movhi	r4,0
    44b0:	117fffcc 	andi	r5,r2,65535
    44b4:	2119ca04 	addi	r4,r4,26408
    44b8:	00045b40 	call	45b4 <printf>
	printf( "CHIP_PAD_STRENGTH register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_PAD_STRENGTH));
    44bc:	01400504 	movi	r5,20
    44c0:	8009883a 	mov	r4,r16
    44c4:	00041bc0 	call	41bc <SGTL5000_Reg_Rd>
    44c8:	01000034 	movhi	r4,0
    44cc:	117fffcc 	andi	r5,r2,65535
    44d0:	2119d204 	addi	r4,r4,26440
    44d4:	00045b40 	call	45b4 <printf>
	//volume from 0 to 7F, or 0 to 127 inclusive (higher is lower volume,
	//0x18 or d24 is same vol)
	//volatile unsigned int *BUTTON_PIO = (unsigned int*)0x5f;

	int vol = 90;
	int button_state = 0;
    44d8:	0025883a 	mov	r18,zero
	//modification of HP out volume:
	//volume from 0 to 7F, or 0 to 127 inclusive (higher is lower volume,
	//0x18 or d24 is same vol)
	//volatile unsigned int *BUTTON_PIO = (unsigned int*)0x5f;

	int vol = 90;
    44dc:	04401684 	movi	r17,90
	int button_state = 0;
	int button = 0;
	while(1)
	{
		button = IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
    44e0:	04c01404 	movi	r19,80
    44e4:	05000044 	movi	r20,1
		if(button_state == 0 && button == 1){
			button_state = 1;
			vol = vol + 2;
			if(vol >= 128){
    44e8:	05401fc4 	movi	r21,127
	int vol = 90;
	int button_state = 0;
	int button = 0;
	while(1)
	{
		button = IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
    44ec:	98800037 	ldwio	r2,0(r19)
		if(button_state == 0 && button == 1){
    44f0:	90000a1e 	bne	r18,zero,451c <main+0x284>
    44f4:	15000a1e 	bne	r2,r20,4520 <main+0x288>
			button_state = 1;
			vol = vol + 2;
    44f8:	8c400084 	addi	r17,r17,2
			if(vol >= 128){
    44fc:	ac40010e 	bge	r21,r17,4504 <main+0x26c>
				vol = 90;
    4500:	04401684 	movi	r17,90
			}
			printf("%d\n", vol);
    4504:	01000034 	movhi	r4,0
    4508:	880b883a 	mov	r5,r17
    450c:	2119da04 	addi	r4,r4,26472
    4510:	00045b40 	call	45b4 <printf>
	int button = 0;
	while(1)
	{
		button = IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
		if(button_state == 0 && button == 1){
			button_state = 1;
    4514:	04800044 	movi	r18,1
    4518:	00000306 	br	4528 <main+0x290>
    451c:	04800044 	movi	r18,1
			if(vol >= 128){
				vol = 90;
			}
			printf("%d\n", vol);
		}
		if(button == 0){
    4520:	1000011e 	bne	r2,zero,4528 <main+0x290>
			button_state = 0;
    4524:	0025883a 	mov	r18,zero
		}
		SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ANA_HP_CTRL, \
    4528:	880c923a 	slli	r6,r17,8
    452c:	01400884 	movi	r5,34
    4530:	8009883a 	mov	r4,r16
    4534:	344cb03a 	or	r6,r6,r17
    4538:	31bfffcc 	andi	r6,r6,65535
    453c:	00042280 	call	4228 <SGTL5000_Reg_Wr>
				vol << SGTL5000_HP_VOL_RIGHT_SHIFT |
				vol << SGTL5000_HP_VOL_LEFT_SHIFT);
	}
    4540:	003fea06 	br	44ec <_gp+0xffff5c64>
	ALT_AVALON_I2C_DEV_t *i2c_dev; //pointer to instance structure
	//get a pointer to the Avalon i2c instance
	i2c_dev = alt_avalon_i2c_open("/dev/i2c_0"); //this has to reflect Platform Designer name
	if (NULL==i2c_dev)						     //check the BSP if unsure
	{
		printf("Error: Cannot find /dev/i2c_0\n");
    4544:	01000034 	movhi	r4,0
    4548:	21196c04 	addi	r4,r4,26032
    454c:	00046800 	call	4680 <puts>
		SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ANA_HP_CTRL, \
				vol << SGTL5000_HP_VOL_RIGHT_SHIFT |
				vol << SGTL5000_HP_VOL_LEFT_SHIFT);
	}
	return 0;
}
    4550:	00800044 	movi	r2,1
    4554:	dfc00617 	ldw	ra,24(sp)
    4558:	dd400517 	ldw	r21,20(sp)
    455c:	dd000417 	ldw	r20,16(sp)
    4560:	dcc00317 	ldw	r19,12(sp)
    4564:	dc800217 	ldw	r18,8(sp)
    4568:	dc400117 	ldw	r17,4(sp)
    456c:	dc000017 	ldw	r16,0(sp)
    4570:	dec00704 	addi	sp,sp,28
    4574:	f800283a 	ret

00004578 <_printf_r>:
    4578:	defffd04 	addi	sp,sp,-12
    457c:	dfc00015 	stw	ra,0(sp)
    4580:	d9800115 	stw	r6,4(sp)
    4584:	d9c00215 	stw	r7,8(sp)
    4588:	20c00217 	ldw	r3,8(r4)
    458c:	01800034 	movhi	r6,0
    4590:	31931904 	addi	r6,r6,19556
    4594:	19800115 	stw	r6,4(r3)
    4598:	280d883a 	mov	r6,r5
    459c:	21400217 	ldw	r5,8(r4)
    45a0:	d9c00104 	addi	r7,sp,4
    45a4:	000471c0 	call	471c <___vfprintf_internal_r>
    45a8:	dfc00017 	ldw	ra,0(sp)
    45ac:	dec00304 	addi	sp,sp,12
    45b0:	f800283a 	ret

000045b4 <printf>:
    45b4:	defffc04 	addi	sp,sp,-16
    45b8:	dfc00015 	stw	ra,0(sp)
    45bc:	d9400115 	stw	r5,4(sp)
    45c0:	d9800215 	stw	r6,8(sp)
    45c4:	d9c00315 	stw	r7,12(sp)
    45c8:	00800034 	movhi	r2,0
    45cc:	109a2304 	addi	r2,r2,26764
    45d0:	10800017 	ldw	r2,0(r2)
    45d4:	01400034 	movhi	r5,0
    45d8:	29531904 	addi	r5,r5,19556
    45dc:	10c00217 	ldw	r3,8(r2)
    45e0:	d9800104 	addi	r6,sp,4
    45e4:	19400115 	stw	r5,4(r3)
    45e8:	200b883a 	mov	r5,r4
    45ec:	11000217 	ldw	r4,8(r2)
    45f0:	0004c480 	call	4c48 <__vfprintf_internal>
    45f4:	dfc00017 	ldw	ra,0(sp)
    45f8:	dec00404 	addi	sp,sp,16
    45fc:	f800283a 	ret

00004600 <_puts_r>:
    4600:	defffd04 	addi	sp,sp,-12
    4604:	dc000015 	stw	r16,0(sp)
    4608:	2021883a 	mov	r16,r4
    460c:	2809883a 	mov	r4,r5
    4610:	dfc00215 	stw	ra,8(sp)
    4614:	dc400115 	stw	r17,4(sp)
    4618:	2823883a 	mov	r17,r5
    461c:	00046940 	call	4694 <strlen>
    4620:	81400217 	ldw	r5,8(r16)
    4624:	01000034 	movhi	r4,0
    4628:	21131904 	addi	r4,r4,19556
    462c:	29000115 	stw	r4,4(r5)
    4630:	100f883a 	mov	r7,r2
    4634:	880d883a 	mov	r6,r17
    4638:	8009883a 	mov	r4,r16
    463c:	0004c640 	call	4c64 <__sfvwrite_small_dev>
    4640:	00ffffc4 	movi	r3,-1
    4644:	10c00926 	beq	r2,r3,466c <_puts_r+0x6c>
    4648:	81400217 	ldw	r5,8(r16)
    464c:	01800034 	movhi	r6,0
    4650:	01c00044 	movi	r7,1
    4654:	28800117 	ldw	r2,4(r5)
    4658:	3199db04 	addi	r6,r6,26476
    465c:	8009883a 	mov	r4,r16
    4660:	103ee83a 	callr	r2
    4664:	10bfffe0 	cmpeqi	r2,r2,-1
    4668:	0085c83a 	sub	r2,zero,r2
    466c:	dfc00217 	ldw	ra,8(sp)
    4670:	dc400117 	ldw	r17,4(sp)
    4674:	dc000017 	ldw	r16,0(sp)
    4678:	dec00304 	addi	sp,sp,12
    467c:	f800283a 	ret

00004680 <puts>:
    4680:	00800034 	movhi	r2,0
    4684:	109a2304 	addi	r2,r2,26764
    4688:	200b883a 	mov	r5,r4
    468c:	11000017 	ldw	r4,0(r2)
    4690:	00046001 	jmpi	4600 <_puts_r>

00004694 <strlen>:
    4694:	2005883a 	mov	r2,r4
    4698:	10c00007 	ldb	r3,0(r2)
    469c:	18000226 	beq	r3,zero,46a8 <strlen+0x14>
    46a0:	10800044 	addi	r2,r2,1
    46a4:	003ffc06 	br	4698 <_gp+0xffff5e10>
    46a8:	1105c83a 	sub	r2,r2,r4
    46ac:	f800283a 	ret

000046b0 <print_repeat>:
    46b0:	defffb04 	addi	sp,sp,-20
    46b4:	dc800315 	stw	r18,12(sp)
    46b8:	dc400215 	stw	r17,8(sp)
    46bc:	dc000115 	stw	r16,4(sp)
    46c0:	dfc00415 	stw	ra,16(sp)
    46c4:	2025883a 	mov	r18,r4
    46c8:	2823883a 	mov	r17,r5
    46cc:	d9800005 	stb	r6,0(sp)
    46d0:	3821883a 	mov	r16,r7
    46d4:	04000a0e 	bge	zero,r16,4700 <print_repeat+0x50>
    46d8:	88800117 	ldw	r2,4(r17)
    46dc:	01c00044 	movi	r7,1
    46e0:	d80d883a 	mov	r6,sp
    46e4:	880b883a 	mov	r5,r17
    46e8:	9009883a 	mov	r4,r18
    46ec:	103ee83a 	callr	r2
    46f0:	843fffc4 	addi	r16,r16,-1
    46f4:	103ff726 	beq	r2,zero,46d4 <_gp+0xffff5e4c>
    46f8:	00bfffc4 	movi	r2,-1
    46fc:	00000106 	br	4704 <print_repeat+0x54>
    4700:	0005883a 	mov	r2,zero
    4704:	dfc00417 	ldw	ra,16(sp)
    4708:	dc800317 	ldw	r18,12(sp)
    470c:	dc400217 	ldw	r17,8(sp)
    4710:	dc000117 	ldw	r16,4(sp)
    4714:	dec00504 	addi	sp,sp,20
    4718:	f800283a 	ret

0000471c <___vfprintf_internal_r>:
    471c:	deffe504 	addi	sp,sp,-108
    4720:	d8c00804 	addi	r3,sp,32
    4724:	ddc01815 	stw	r23,96(sp)
    4728:	dd801715 	stw	r22,92(sp)
    472c:	dd401615 	stw	r21,88(sp)
    4730:	dd001515 	stw	r20,84(sp)
    4734:	dcc01415 	stw	r19,80(sp)
    4738:	dc801315 	stw	r18,76(sp)
    473c:	dc401215 	stw	r17,72(sp)
    4740:	dc001115 	stw	r16,68(sp)
    4744:	dfc01a15 	stw	ra,104(sp)
    4748:	df001915 	stw	fp,100(sp)
    474c:	2029883a 	mov	r20,r4
    4750:	2823883a 	mov	r17,r5
    4754:	382d883a 	mov	r22,r7
    4758:	d9800f15 	stw	r6,60(sp)
    475c:	0021883a 	mov	r16,zero
    4760:	d8000e15 	stw	zero,56(sp)
    4764:	d8000a15 	stw	zero,40(sp)
    4768:	002b883a 	mov	r21,zero
    476c:	0027883a 	mov	r19,zero
    4770:	0025883a 	mov	r18,zero
    4774:	d8000c15 	stw	zero,48(sp)
    4778:	d8000b15 	stw	zero,44(sp)
    477c:	002f883a 	mov	r23,zero
    4780:	d8c00915 	stw	r3,36(sp)
    4784:	d8c00f17 	ldw	r3,60(sp)
    4788:	19000003 	ldbu	r4,0(r3)
    478c:	20803fcc 	andi	r2,r4,255
    4790:	1080201c 	xori	r2,r2,128
    4794:	10bfe004 	addi	r2,r2,-128
    4798:	10011e26 	beq	r2,zero,4c14 <___vfprintf_internal_r+0x4f8>
    479c:	00c00044 	movi	r3,1
    47a0:	b8c01426 	beq	r23,r3,47f4 <___vfprintf_internal_r+0xd8>
    47a4:	1dc00216 	blt	r3,r23,47b0 <___vfprintf_internal_r+0x94>
    47a8:	b8000626 	beq	r23,zero,47c4 <___vfprintf_internal_r+0xa8>
    47ac:	00011506 	br	4c04 <___vfprintf_internal_r+0x4e8>
    47b0:	01400084 	movi	r5,2
    47b4:	b9401d26 	beq	r23,r5,482c <___vfprintf_internal_r+0x110>
    47b8:	014000c4 	movi	r5,3
    47bc:	b9402b26 	beq	r23,r5,486c <___vfprintf_internal_r+0x150>
    47c0:	00011006 	br	4c04 <___vfprintf_internal_r+0x4e8>
    47c4:	01400944 	movi	r5,37
    47c8:	1140fc26 	beq	r2,r5,4bbc <___vfprintf_internal_r+0x4a0>
    47cc:	88800117 	ldw	r2,4(r17)
    47d0:	d9000005 	stb	r4,0(sp)
    47d4:	01c00044 	movi	r7,1
    47d8:	d80d883a 	mov	r6,sp
    47dc:	880b883a 	mov	r5,r17
    47e0:	a009883a 	mov	r4,r20
    47e4:	103ee83a 	callr	r2
    47e8:	1000d81e 	bne	r2,zero,4b4c <___vfprintf_internal_r+0x430>
    47ec:	84000044 	addi	r16,r16,1
    47f0:	00010406 	br	4c04 <___vfprintf_internal_r+0x4e8>
    47f4:	01400c04 	movi	r5,48
    47f8:	1140fa26 	beq	r2,r5,4be4 <___vfprintf_internal_r+0x4c8>
    47fc:	01400944 	movi	r5,37
    4800:	11400a1e 	bne	r2,r5,482c <___vfprintf_internal_r+0x110>
    4804:	d8800005 	stb	r2,0(sp)
    4808:	88800117 	ldw	r2,4(r17)
    480c:	b80f883a 	mov	r7,r23
    4810:	d80d883a 	mov	r6,sp
    4814:	880b883a 	mov	r5,r17
    4818:	a009883a 	mov	r4,r20
    481c:	103ee83a 	callr	r2
    4820:	1000ca1e 	bne	r2,zero,4b4c <___vfprintf_internal_r+0x430>
    4824:	84000044 	addi	r16,r16,1
    4828:	0000f506 	br	4c00 <___vfprintf_internal_r+0x4e4>
    482c:	25fff404 	addi	r23,r4,-48
    4830:	bdc03fcc 	andi	r23,r23,255
    4834:	00c00244 	movi	r3,9
    4838:	1dc00936 	bltu	r3,r23,4860 <___vfprintf_internal_r+0x144>
    483c:	00bfffc4 	movi	r2,-1
    4840:	90800426 	beq	r18,r2,4854 <___vfprintf_internal_r+0x138>
    4844:	01400284 	movi	r5,10
    4848:	9009883a 	mov	r4,r18
    484c:	0004f280 	call	4f28 <__mulsi3>
    4850:	00000106 	br	4858 <___vfprintf_internal_r+0x13c>
    4854:	0005883a 	mov	r2,zero
    4858:	b8a5883a 	add	r18,r23,r2
    485c:	0000e206 	br	4be8 <___vfprintf_internal_r+0x4cc>
    4860:	01400b84 	movi	r5,46
    4864:	1140e426 	beq	r2,r5,4bf8 <___vfprintf_internal_r+0x4dc>
    4868:	05c00084 	movi	r23,2
    486c:	213ff404 	addi	r4,r4,-48
    4870:	27003fcc 	andi	fp,r4,255
    4874:	00c00244 	movi	r3,9
    4878:	1f000936 	bltu	r3,fp,48a0 <___vfprintf_internal_r+0x184>
    487c:	00bfffc4 	movi	r2,-1
    4880:	98800426 	beq	r19,r2,4894 <___vfprintf_internal_r+0x178>
    4884:	01400284 	movi	r5,10
    4888:	9809883a 	mov	r4,r19
    488c:	0004f280 	call	4f28 <__mulsi3>
    4890:	00000106 	br	4898 <___vfprintf_internal_r+0x17c>
    4894:	0005883a 	mov	r2,zero
    4898:	e0a7883a 	add	r19,fp,r2
    489c:	0000d906 	br	4c04 <___vfprintf_internal_r+0x4e8>
    48a0:	00c01b04 	movi	r3,108
    48a4:	10c0d226 	beq	r2,r3,4bf0 <___vfprintf_internal_r+0x4d4>
    48a8:	013fffc4 	movi	r4,-1
    48ac:	99000226 	beq	r19,r4,48b8 <___vfprintf_internal_r+0x19c>
    48b0:	d8000b15 	stw	zero,44(sp)
    48b4:	00000106 	br	48bc <___vfprintf_internal_r+0x1a0>
    48b8:	04c00044 	movi	r19,1
    48bc:	01001a44 	movi	r4,105
    48c0:	11001626 	beq	r2,r4,491c <___vfprintf_internal_r+0x200>
    48c4:	20800916 	blt	r4,r2,48ec <___vfprintf_internal_r+0x1d0>
    48c8:	010018c4 	movi	r4,99
    48cc:	11008826 	beq	r2,r4,4af0 <___vfprintf_internal_r+0x3d4>
    48d0:	01001904 	movi	r4,100
    48d4:	11001126 	beq	r2,r4,491c <___vfprintf_internal_r+0x200>
    48d8:	01001604 	movi	r4,88
    48dc:	1100c81e 	bne	r2,r4,4c00 <___vfprintf_internal_r+0x4e4>
    48e0:	00c00044 	movi	r3,1
    48e4:	d8c00e15 	stw	r3,56(sp)
    48e8:	00001506 	br	4940 <___vfprintf_internal_r+0x224>
    48ec:	01001cc4 	movi	r4,115
    48f0:	11009826 	beq	r2,r4,4b54 <___vfprintf_internal_r+0x438>
    48f4:	20800416 	blt	r4,r2,4908 <___vfprintf_internal_r+0x1ec>
    48f8:	01001bc4 	movi	r4,111
    48fc:	1100c01e 	bne	r2,r4,4c00 <___vfprintf_internal_r+0x4e4>
    4900:	05400204 	movi	r21,8
    4904:	00000f06 	br	4944 <___vfprintf_internal_r+0x228>
    4908:	01001d44 	movi	r4,117
    490c:	11000d26 	beq	r2,r4,4944 <___vfprintf_internal_r+0x228>
    4910:	01001e04 	movi	r4,120
    4914:	11000a26 	beq	r2,r4,4940 <___vfprintf_internal_r+0x224>
    4918:	0000b906 	br	4c00 <___vfprintf_internal_r+0x4e4>
    491c:	d8c00a17 	ldw	r3,40(sp)
    4920:	b7000104 	addi	fp,r22,4
    4924:	18000726 	beq	r3,zero,4944 <___vfprintf_internal_r+0x228>
    4928:	df000d15 	stw	fp,52(sp)
    492c:	b5c00017 	ldw	r23,0(r22)
    4930:	b800080e 	bge	r23,zero,4954 <___vfprintf_internal_r+0x238>
    4934:	05efc83a 	sub	r23,zero,r23
    4938:	02400044 	movi	r9,1
    493c:	00000606 	br	4958 <___vfprintf_internal_r+0x23c>
    4940:	05400404 	movi	r21,16
    4944:	b0c00104 	addi	r3,r22,4
    4948:	d8c00d15 	stw	r3,52(sp)
    494c:	b5c00017 	ldw	r23,0(r22)
    4950:	d8000a15 	stw	zero,40(sp)
    4954:	0013883a 	mov	r9,zero
    4958:	d839883a 	mov	fp,sp
    495c:	b8001726 	beq	r23,zero,49bc <___vfprintf_internal_r+0x2a0>
    4960:	a80b883a 	mov	r5,r21
    4964:	b809883a 	mov	r4,r23
    4968:	da401015 	stw	r9,64(sp)
    496c:	0004e6c0 	call	4e6c <__udivsi3>
    4970:	a80b883a 	mov	r5,r21
    4974:	1009883a 	mov	r4,r2
    4978:	102d883a 	mov	r22,r2
    497c:	0004f280 	call	4f28 <__mulsi3>
    4980:	b885c83a 	sub	r2,r23,r2
    4984:	00c00244 	movi	r3,9
    4988:	da401017 	ldw	r9,64(sp)
    498c:	18800216 	blt	r3,r2,4998 <___vfprintf_internal_r+0x27c>
    4990:	10800c04 	addi	r2,r2,48
    4994:	00000506 	br	49ac <___vfprintf_internal_r+0x290>
    4998:	d8c00e17 	ldw	r3,56(sp)
    499c:	18000226 	beq	r3,zero,49a8 <___vfprintf_internal_r+0x28c>
    49a0:	10800dc4 	addi	r2,r2,55
    49a4:	00000106 	br	49ac <___vfprintf_internal_r+0x290>
    49a8:	108015c4 	addi	r2,r2,87
    49ac:	e0800005 	stb	r2,0(fp)
    49b0:	b02f883a 	mov	r23,r22
    49b4:	e7000044 	addi	fp,fp,1
    49b8:	003fe806 	br	495c <_gp+0xffff60d4>
    49bc:	e6efc83a 	sub	r23,fp,sp
    49c0:	9dc5c83a 	sub	r2,r19,r23
    49c4:	0080090e 	bge	zero,r2,49ec <___vfprintf_internal_r+0x2d0>
    49c8:	e085883a 	add	r2,fp,r2
    49cc:	01400c04 	movi	r5,48
    49d0:	d8c00917 	ldw	r3,36(sp)
    49d4:	e009883a 	mov	r4,fp
    49d8:	e0c0032e 	bgeu	fp,r3,49e8 <___vfprintf_internal_r+0x2cc>
    49dc:	e7000044 	addi	fp,fp,1
    49e0:	21400005 	stb	r5,0(r4)
    49e4:	e0bffa1e 	bne	fp,r2,49d0 <_gp+0xffff6148>
    49e8:	e6efc83a 	sub	r23,fp,sp
    49ec:	d8c00b17 	ldw	r3,44(sp)
    49f0:	4dd1883a 	add	r8,r9,r23
    49f4:	922dc83a 	sub	r22,r18,r8
    49f8:	18001626 	beq	r3,zero,4a54 <___vfprintf_internal_r+0x338>
    49fc:	48000a26 	beq	r9,zero,4a28 <___vfprintf_internal_r+0x30c>
    4a00:	00800b44 	movi	r2,45
    4a04:	d8800805 	stb	r2,32(sp)
    4a08:	88800117 	ldw	r2,4(r17)
    4a0c:	01c00044 	movi	r7,1
    4a10:	d9800804 	addi	r6,sp,32
    4a14:	880b883a 	mov	r5,r17
    4a18:	a009883a 	mov	r4,r20
    4a1c:	103ee83a 	callr	r2
    4a20:	10004a1e 	bne	r2,zero,4b4c <___vfprintf_internal_r+0x430>
    4a24:	84000044 	addi	r16,r16,1
    4a28:	0580070e 	bge	zero,r22,4a48 <___vfprintf_internal_r+0x32c>
    4a2c:	b00f883a 	mov	r7,r22
    4a30:	01800c04 	movi	r6,48
    4a34:	880b883a 	mov	r5,r17
    4a38:	a009883a 	mov	r4,r20
    4a3c:	00046b00 	call	46b0 <print_repeat>
    4a40:	1000421e 	bne	r2,zero,4b4c <___vfprintf_internal_r+0x430>
    4a44:	85a1883a 	add	r16,r16,r22
    4a48:	e02d883a 	mov	r22,fp
    4a4c:	bf2fc83a 	sub	r23,r23,fp
    4a50:	00002006 	br	4ad4 <___vfprintf_internal_r+0x3b8>
    4a54:	0580090e 	bge	zero,r22,4a7c <___vfprintf_internal_r+0x360>
    4a58:	b00f883a 	mov	r7,r22
    4a5c:	01800804 	movi	r6,32
    4a60:	880b883a 	mov	r5,r17
    4a64:	a009883a 	mov	r4,r20
    4a68:	da401015 	stw	r9,64(sp)
    4a6c:	00046b00 	call	46b0 <print_repeat>
    4a70:	da401017 	ldw	r9,64(sp)
    4a74:	1000351e 	bne	r2,zero,4b4c <___vfprintf_internal_r+0x430>
    4a78:	85a1883a 	add	r16,r16,r22
    4a7c:	483ff226 	beq	r9,zero,4a48 <_gp+0xffff61c0>
    4a80:	00800b44 	movi	r2,45
    4a84:	d8800805 	stb	r2,32(sp)
    4a88:	88800117 	ldw	r2,4(r17)
    4a8c:	01c00044 	movi	r7,1
    4a90:	d9800804 	addi	r6,sp,32
    4a94:	880b883a 	mov	r5,r17
    4a98:	a009883a 	mov	r4,r20
    4a9c:	103ee83a 	callr	r2
    4aa0:	10002a1e 	bne	r2,zero,4b4c <___vfprintf_internal_r+0x430>
    4aa4:	84000044 	addi	r16,r16,1
    4aa8:	003fe706 	br	4a48 <_gp+0xffff61c0>
    4aac:	b5bfffc4 	addi	r22,r22,-1
    4ab0:	b0800003 	ldbu	r2,0(r22)
    4ab4:	01c00044 	movi	r7,1
    4ab8:	d9800804 	addi	r6,sp,32
    4abc:	d8800805 	stb	r2,32(sp)
    4ac0:	88800117 	ldw	r2,4(r17)
    4ac4:	880b883a 	mov	r5,r17
    4ac8:	a009883a 	mov	r4,r20
    4acc:	103ee83a 	callr	r2
    4ad0:	10001e1e 	bne	r2,zero,4b4c <___vfprintf_internal_r+0x430>
    4ad4:	8585c83a 	sub	r2,r16,r22
    4ad8:	b5c9883a 	add	r4,r22,r23
    4adc:	e085883a 	add	r2,fp,r2
    4ae0:	013ff216 	blt	zero,r4,4aac <_gp+0xffff6224>
    4ae4:	1021883a 	mov	r16,r2
    4ae8:	dd800d17 	ldw	r22,52(sp)
    4aec:	00004406 	br	4c00 <___vfprintf_internal_r+0x4e4>
    4af0:	00800044 	movi	r2,1
    4af4:	1480080e 	bge	r2,r18,4b18 <___vfprintf_internal_r+0x3fc>
    4af8:	95ffffc4 	addi	r23,r18,-1
    4afc:	b80f883a 	mov	r7,r23
    4b00:	01800804 	movi	r6,32
    4b04:	880b883a 	mov	r5,r17
    4b08:	a009883a 	mov	r4,r20
    4b0c:	00046b00 	call	46b0 <print_repeat>
    4b10:	10000e1e 	bne	r2,zero,4b4c <___vfprintf_internal_r+0x430>
    4b14:	85e1883a 	add	r16,r16,r23
    4b18:	b0800017 	ldw	r2,0(r22)
    4b1c:	01c00044 	movi	r7,1
    4b20:	d80d883a 	mov	r6,sp
    4b24:	d8800005 	stb	r2,0(sp)
    4b28:	88800117 	ldw	r2,4(r17)
    4b2c:	880b883a 	mov	r5,r17
    4b30:	a009883a 	mov	r4,r20
    4b34:	b5c00104 	addi	r23,r22,4
    4b38:	103ee83a 	callr	r2
    4b3c:	1000031e 	bne	r2,zero,4b4c <___vfprintf_internal_r+0x430>
    4b40:	84000044 	addi	r16,r16,1
    4b44:	b82d883a 	mov	r22,r23
    4b48:	00002d06 	br	4c00 <___vfprintf_internal_r+0x4e4>
    4b4c:	00bfffc4 	movi	r2,-1
    4b50:	00003106 	br	4c18 <___vfprintf_internal_r+0x4fc>
    4b54:	b5c00017 	ldw	r23,0(r22)
    4b58:	b7000104 	addi	fp,r22,4
    4b5c:	b809883a 	mov	r4,r23
    4b60:	00046940 	call	4694 <strlen>
    4b64:	9091c83a 	sub	r8,r18,r2
    4b68:	102d883a 	mov	r22,r2
    4b6c:	0200090e 	bge	zero,r8,4b94 <___vfprintf_internal_r+0x478>
    4b70:	400f883a 	mov	r7,r8
    4b74:	01800804 	movi	r6,32
    4b78:	880b883a 	mov	r5,r17
    4b7c:	a009883a 	mov	r4,r20
    4b80:	da001015 	stw	r8,64(sp)
    4b84:	00046b00 	call	46b0 <print_repeat>
    4b88:	da001017 	ldw	r8,64(sp)
    4b8c:	103fef1e 	bne	r2,zero,4b4c <_gp+0xffff62c4>
    4b90:	8221883a 	add	r16,r16,r8
    4b94:	88800117 	ldw	r2,4(r17)
    4b98:	b00f883a 	mov	r7,r22
    4b9c:	b80d883a 	mov	r6,r23
    4ba0:	880b883a 	mov	r5,r17
    4ba4:	a009883a 	mov	r4,r20
    4ba8:	103ee83a 	callr	r2
    4bac:	103fe71e 	bne	r2,zero,4b4c <_gp+0xffff62c4>
    4bb0:	85a1883a 	add	r16,r16,r22
    4bb4:	e02d883a 	mov	r22,fp
    4bb8:	00001106 	br	4c00 <___vfprintf_internal_r+0x4e4>
    4bbc:	00c00044 	movi	r3,1
    4bc0:	04ffffc4 	movi	r19,-1
    4bc4:	d8000e15 	stw	zero,56(sp)
    4bc8:	d8c00a15 	stw	r3,40(sp)
    4bcc:	05400284 	movi	r21,10
    4bd0:	9825883a 	mov	r18,r19
    4bd4:	d8000c15 	stw	zero,48(sp)
    4bd8:	d8000b15 	stw	zero,44(sp)
    4bdc:	182f883a 	mov	r23,r3
    4be0:	00000806 	br	4c04 <___vfprintf_internal_r+0x4e8>
    4be4:	ddc00b15 	stw	r23,44(sp)
    4be8:	05c00084 	movi	r23,2
    4bec:	00000506 	br	4c04 <___vfprintf_internal_r+0x4e8>
    4bf0:	00c00044 	movi	r3,1
    4bf4:	d8c00c15 	stw	r3,48(sp)
    4bf8:	05c000c4 	movi	r23,3
    4bfc:	00000106 	br	4c04 <___vfprintf_internal_r+0x4e8>
    4c00:	002f883a 	mov	r23,zero
    4c04:	d8c00f17 	ldw	r3,60(sp)
    4c08:	18c00044 	addi	r3,r3,1
    4c0c:	d8c00f15 	stw	r3,60(sp)
    4c10:	003edc06 	br	4784 <_gp+0xffff5efc>
    4c14:	8005883a 	mov	r2,r16
    4c18:	dfc01a17 	ldw	ra,104(sp)
    4c1c:	df001917 	ldw	fp,100(sp)
    4c20:	ddc01817 	ldw	r23,96(sp)
    4c24:	dd801717 	ldw	r22,92(sp)
    4c28:	dd401617 	ldw	r21,88(sp)
    4c2c:	dd001517 	ldw	r20,84(sp)
    4c30:	dcc01417 	ldw	r19,80(sp)
    4c34:	dc801317 	ldw	r18,76(sp)
    4c38:	dc401217 	ldw	r17,72(sp)
    4c3c:	dc001117 	ldw	r16,68(sp)
    4c40:	dec01b04 	addi	sp,sp,108
    4c44:	f800283a 	ret

00004c48 <__vfprintf_internal>:
    4c48:	00800034 	movhi	r2,0
    4c4c:	109a2304 	addi	r2,r2,26764
    4c50:	300f883a 	mov	r7,r6
    4c54:	280d883a 	mov	r6,r5
    4c58:	200b883a 	mov	r5,r4
    4c5c:	11000017 	ldw	r4,0(r2)
    4c60:	000471c1 	jmpi	471c <___vfprintf_internal_r>

00004c64 <__sfvwrite_small_dev>:
    4c64:	2880000b 	ldhu	r2,0(r5)
    4c68:	1080020c 	andi	r2,r2,8
    4c6c:	10002126 	beq	r2,zero,4cf4 <__sfvwrite_small_dev+0x90>
    4c70:	2880008f 	ldh	r2,2(r5)
    4c74:	defffa04 	addi	sp,sp,-24
    4c78:	dc000015 	stw	r16,0(sp)
    4c7c:	dfc00515 	stw	ra,20(sp)
    4c80:	dd000415 	stw	r20,16(sp)
    4c84:	dcc00315 	stw	r19,12(sp)
    4c88:	dc800215 	stw	r18,8(sp)
    4c8c:	dc400115 	stw	r17,4(sp)
    4c90:	2821883a 	mov	r16,r5
    4c94:	10001216 	blt	r2,zero,4ce0 <__sfvwrite_small_dev+0x7c>
    4c98:	2027883a 	mov	r19,r4
    4c9c:	3025883a 	mov	r18,r6
    4ca0:	3823883a 	mov	r17,r7
    4ca4:	05010004 	movi	r20,1024
    4ca8:	04400b0e 	bge	zero,r17,4cd8 <__sfvwrite_small_dev+0x74>
    4cac:	880f883a 	mov	r7,r17
    4cb0:	a440010e 	bge	r20,r17,4cb8 <__sfvwrite_small_dev+0x54>
    4cb4:	01c10004 	movi	r7,1024
    4cb8:	8140008f 	ldh	r5,2(r16)
    4cbc:	900d883a 	mov	r6,r18
    4cc0:	9809883a 	mov	r4,r19
    4cc4:	0004d1c0 	call	4d1c <_write_r>
    4cc8:	0080050e 	bge	zero,r2,4ce0 <__sfvwrite_small_dev+0x7c>
    4ccc:	88a3c83a 	sub	r17,r17,r2
    4cd0:	90a5883a 	add	r18,r18,r2
    4cd4:	003ff406 	br	4ca8 <_gp+0xffff6420>
    4cd8:	0005883a 	mov	r2,zero
    4cdc:	00000706 	br	4cfc <__sfvwrite_small_dev+0x98>
    4ce0:	8080000b 	ldhu	r2,0(r16)
    4ce4:	10801014 	ori	r2,r2,64
    4ce8:	8080000d 	sth	r2,0(r16)
    4cec:	00bfffc4 	movi	r2,-1
    4cf0:	00000206 	br	4cfc <__sfvwrite_small_dev+0x98>
    4cf4:	00bfffc4 	movi	r2,-1
    4cf8:	f800283a 	ret
    4cfc:	dfc00517 	ldw	ra,20(sp)
    4d00:	dd000417 	ldw	r20,16(sp)
    4d04:	dcc00317 	ldw	r19,12(sp)
    4d08:	dc800217 	ldw	r18,8(sp)
    4d0c:	dc400117 	ldw	r17,4(sp)
    4d10:	dc000017 	ldw	r16,0(sp)
    4d14:	dec00604 	addi	sp,sp,24
    4d18:	f800283a 	ret

00004d1c <_write_r>:
    4d1c:	defffd04 	addi	sp,sp,-12
    4d20:	dc000015 	stw	r16,0(sp)
    4d24:	04000034 	movhi	r16,0
    4d28:	dc400115 	stw	r17,4(sp)
    4d2c:	841a7404 	addi	r16,r16,27088
    4d30:	2023883a 	mov	r17,r4
    4d34:	2809883a 	mov	r4,r5
    4d38:	300b883a 	mov	r5,r6
    4d3c:	380d883a 	mov	r6,r7
    4d40:	dfc00215 	stw	ra,8(sp)
    4d44:	80000015 	stw	zero,0(r16)
    4d48:	000505c0 	call	505c <write>
    4d4c:	00ffffc4 	movi	r3,-1
    4d50:	10c0031e 	bne	r2,r3,4d60 <_write_r+0x44>
    4d54:	80c00017 	ldw	r3,0(r16)
    4d58:	18000126 	beq	r3,zero,4d60 <_write_r+0x44>
    4d5c:	88c00015 	stw	r3,0(r17)
    4d60:	dfc00217 	ldw	ra,8(sp)
    4d64:	dc400117 	ldw	r17,4(sp)
    4d68:	dc000017 	ldw	r16,0(sp)
    4d6c:	dec00304 	addi	sp,sp,12
    4d70:	f800283a 	ret

00004d74 <__divsi3>:
    4d74:	20001b16 	blt	r4,zero,4de4 <__divsi3+0x70>
    4d78:	000f883a 	mov	r7,zero
    4d7c:	28001616 	blt	r5,zero,4dd8 <__divsi3+0x64>
    4d80:	200d883a 	mov	r6,r4
    4d84:	29001a2e 	bgeu	r5,r4,4df0 <__divsi3+0x7c>
    4d88:	00800804 	movi	r2,32
    4d8c:	00c00044 	movi	r3,1
    4d90:	00000106 	br	4d98 <__divsi3+0x24>
    4d94:	10000d26 	beq	r2,zero,4dcc <__divsi3+0x58>
    4d98:	294b883a 	add	r5,r5,r5
    4d9c:	10bfffc4 	addi	r2,r2,-1
    4da0:	18c7883a 	add	r3,r3,r3
    4da4:	293ffb36 	bltu	r5,r4,4d94 <_gp+0xffff650c>
    4da8:	0005883a 	mov	r2,zero
    4dac:	18000726 	beq	r3,zero,4dcc <__divsi3+0x58>
    4db0:	0005883a 	mov	r2,zero
    4db4:	31400236 	bltu	r6,r5,4dc0 <__divsi3+0x4c>
    4db8:	314dc83a 	sub	r6,r6,r5
    4dbc:	10c4b03a 	or	r2,r2,r3
    4dc0:	1806d07a 	srli	r3,r3,1
    4dc4:	280ad07a 	srli	r5,r5,1
    4dc8:	183ffa1e 	bne	r3,zero,4db4 <_gp+0xffff652c>
    4dcc:	38000126 	beq	r7,zero,4dd4 <__divsi3+0x60>
    4dd0:	0085c83a 	sub	r2,zero,r2
    4dd4:	f800283a 	ret
    4dd8:	014bc83a 	sub	r5,zero,r5
    4ddc:	39c0005c 	xori	r7,r7,1
    4de0:	003fe706 	br	4d80 <_gp+0xffff64f8>
    4de4:	0109c83a 	sub	r4,zero,r4
    4de8:	01c00044 	movi	r7,1
    4dec:	003fe306 	br	4d7c <_gp+0xffff64f4>
    4df0:	00c00044 	movi	r3,1
    4df4:	003fee06 	br	4db0 <_gp+0xffff6528>

00004df8 <__modsi3>:
    4df8:	20001716 	blt	r4,zero,4e58 <__modsi3+0x60>
    4dfc:	000f883a 	mov	r7,zero
    4e00:	2005883a 	mov	r2,r4
    4e04:	28001216 	blt	r5,zero,4e50 <__modsi3+0x58>
    4e08:	2900162e 	bgeu	r5,r4,4e64 <__modsi3+0x6c>
    4e0c:	01800804 	movi	r6,32
    4e10:	00c00044 	movi	r3,1
    4e14:	00000106 	br	4e1c <__modsi3+0x24>
    4e18:	30000a26 	beq	r6,zero,4e44 <__modsi3+0x4c>
    4e1c:	294b883a 	add	r5,r5,r5
    4e20:	31bfffc4 	addi	r6,r6,-1
    4e24:	18c7883a 	add	r3,r3,r3
    4e28:	293ffb36 	bltu	r5,r4,4e18 <_gp+0xffff6590>
    4e2c:	18000526 	beq	r3,zero,4e44 <__modsi3+0x4c>
    4e30:	1806d07a 	srli	r3,r3,1
    4e34:	11400136 	bltu	r2,r5,4e3c <__modsi3+0x44>
    4e38:	1145c83a 	sub	r2,r2,r5
    4e3c:	280ad07a 	srli	r5,r5,1
    4e40:	183ffb1e 	bne	r3,zero,4e30 <_gp+0xffff65a8>
    4e44:	38000126 	beq	r7,zero,4e4c <__modsi3+0x54>
    4e48:	0085c83a 	sub	r2,zero,r2
    4e4c:	f800283a 	ret
    4e50:	014bc83a 	sub	r5,zero,r5
    4e54:	003fec06 	br	4e08 <_gp+0xffff6580>
    4e58:	0109c83a 	sub	r4,zero,r4
    4e5c:	01c00044 	movi	r7,1
    4e60:	003fe706 	br	4e00 <_gp+0xffff6578>
    4e64:	00c00044 	movi	r3,1
    4e68:	003ff106 	br	4e30 <_gp+0xffff65a8>

00004e6c <__udivsi3>:
    4e6c:	200d883a 	mov	r6,r4
    4e70:	2900152e 	bgeu	r5,r4,4ec8 <__udivsi3+0x5c>
    4e74:	28001416 	blt	r5,zero,4ec8 <__udivsi3+0x5c>
    4e78:	00800804 	movi	r2,32
    4e7c:	00c00044 	movi	r3,1
    4e80:	00000206 	br	4e8c <__udivsi3+0x20>
    4e84:	10000e26 	beq	r2,zero,4ec0 <__udivsi3+0x54>
    4e88:	28000516 	blt	r5,zero,4ea0 <__udivsi3+0x34>
    4e8c:	294b883a 	add	r5,r5,r5
    4e90:	10bfffc4 	addi	r2,r2,-1
    4e94:	18c7883a 	add	r3,r3,r3
    4e98:	293ffa36 	bltu	r5,r4,4e84 <_gp+0xffff65fc>
    4e9c:	18000826 	beq	r3,zero,4ec0 <__udivsi3+0x54>
    4ea0:	0005883a 	mov	r2,zero
    4ea4:	31400236 	bltu	r6,r5,4eb0 <__udivsi3+0x44>
    4ea8:	314dc83a 	sub	r6,r6,r5
    4eac:	10c4b03a 	or	r2,r2,r3
    4eb0:	1806d07a 	srli	r3,r3,1
    4eb4:	280ad07a 	srli	r5,r5,1
    4eb8:	183ffa1e 	bne	r3,zero,4ea4 <_gp+0xffff661c>
    4ebc:	f800283a 	ret
    4ec0:	0005883a 	mov	r2,zero
    4ec4:	f800283a 	ret
    4ec8:	00c00044 	movi	r3,1
    4ecc:	003ff406 	br	4ea0 <_gp+0xffff6618>

00004ed0 <__umodsi3>:
    4ed0:	2005883a 	mov	r2,r4
    4ed4:	2900122e 	bgeu	r5,r4,4f20 <__umodsi3+0x50>
    4ed8:	28001116 	blt	r5,zero,4f20 <__umodsi3+0x50>
    4edc:	01800804 	movi	r6,32
    4ee0:	00c00044 	movi	r3,1
    4ee4:	00000206 	br	4ef0 <__umodsi3+0x20>
    4ee8:	30000c26 	beq	r6,zero,4f1c <__umodsi3+0x4c>
    4eec:	28000516 	blt	r5,zero,4f04 <__umodsi3+0x34>
    4ef0:	294b883a 	add	r5,r5,r5
    4ef4:	31bfffc4 	addi	r6,r6,-1
    4ef8:	18c7883a 	add	r3,r3,r3
    4efc:	293ffa36 	bltu	r5,r4,4ee8 <_gp+0xffff6660>
    4f00:	18000626 	beq	r3,zero,4f1c <__umodsi3+0x4c>
    4f04:	1806d07a 	srli	r3,r3,1
    4f08:	11400136 	bltu	r2,r5,4f10 <__umodsi3+0x40>
    4f0c:	1145c83a 	sub	r2,r2,r5
    4f10:	280ad07a 	srli	r5,r5,1
    4f14:	183ffb1e 	bne	r3,zero,4f04 <_gp+0xffff667c>
    4f18:	f800283a 	ret
    4f1c:	f800283a 	ret
    4f20:	00c00044 	movi	r3,1
    4f24:	003ff706 	br	4f04 <_gp+0xffff667c>

00004f28 <__mulsi3>:
    4f28:	0005883a 	mov	r2,zero
    4f2c:	20000726 	beq	r4,zero,4f4c <__mulsi3+0x24>
    4f30:	20c0004c 	andi	r3,r4,1
    4f34:	2008d07a 	srli	r4,r4,1
    4f38:	18000126 	beq	r3,zero,4f40 <__mulsi3+0x18>
    4f3c:	1145883a 	add	r2,r2,r5
    4f40:	294b883a 	add	r5,r5,r5
    4f44:	203ffa1e 	bne	r4,zero,4f30 <_gp+0xffff66a8>
    4f48:	f800283a 	ret
    4f4c:	f800283a 	ret

00004f50 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    4f50:	deffff04 	addi	sp,sp,-4
    4f54:	01000034 	movhi	r4,0
    4f58:	01400034 	movhi	r5,0
    4f5c:	dfc00015 	stw	ra,0(sp)
    4f60:	2119dc04 	addi	r4,r4,26480
    4f64:	295a2804 	addi	r5,r5,26784

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    4f68:	2140061e 	bne	r4,r5,4f84 <alt_load+0x34>
    4f6c:	01000034 	movhi	r4,0
    4f70:	01400034 	movhi	r5,0
    4f74:	21100804 	addi	r4,r4,16416
    4f78:	29500804 	addi	r5,r5,16416
    4f7c:	2140121e 	bne	r4,r5,4fc8 <alt_load+0x78>
    4f80:	00000b06 	br	4fb0 <alt_load+0x60>
    4f84:	00c00034 	movhi	r3,0
    4f88:	18da2804 	addi	r3,r3,26784
    4f8c:	1907c83a 	sub	r3,r3,r4
    4f90:	0005883a 	mov	r2,zero
  {
    while( to != end )
    4f94:	10fff526 	beq	r2,r3,4f6c <_gp+0xffff66e4>
    {
      *to++ = *from++;
    4f98:	114f883a 	add	r7,r2,r5
    4f9c:	39c00017 	ldw	r7,0(r7)
    4fa0:	110d883a 	add	r6,r2,r4
    4fa4:	10800104 	addi	r2,r2,4
    4fa8:	31c00015 	stw	r7,0(r6)
    4fac:	003ff906 	br	4f94 <_gp+0xffff670c>
    4fb0:	01000034 	movhi	r4,0
    4fb4:	01400034 	movhi	r5,0
    4fb8:	21196104 	addi	r4,r4,25988
    4fbc:	29596104 	addi	r5,r5,25988

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    4fc0:	2140101e 	bne	r4,r5,5004 <alt_load+0xb4>
    4fc4:	00000b06 	br	4ff4 <alt_load+0xa4>
    4fc8:	00c00034 	movhi	r3,0
    4fcc:	18d06004 	addi	r3,r3,16768
    4fd0:	1907c83a 	sub	r3,r3,r4
    4fd4:	0005883a 	mov	r2,zero
  {
    while( to != end )
    4fd8:	10fff526 	beq	r2,r3,4fb0 <_gp+0xffff6728>
    {
      *to++ = *from++;
    4fdc:	114f883a 	add	r7,r2,r5
    4fe0:	39c00017 	ldw	r7,0(r7)
    4fe4:	110d883a 	add	r6,r2,r4
    4fe8:	10800104 	addi	r2,r2,4
    4fec:	31c00015 	stw	r7,0(r6)
    4ff0:	003ff906 	br	4fd8 <_gp+0xffff6750>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    4ff4:	00062fc0 	call	62fc <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    4ff8:	dfc00017 	ldw	ra,0(sp)
    4ffc:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    5000:	00063e01 	jmpi	63e0 <alt_icache_flush_all>
    5004:	00c00034 	movhi	r3,0
    5008:	18d9dc04 	addi	r3,r3,26480
    500c:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    5010:	0005883a 	mov	r2,zero
  {
    while( to != end )
    5014:	18bff726 	beq	r3,r2,4ff4 <_gp+0xffff676c>
    {
      *to++ = *from++;
    5018:	114f883a 	add	r7,r2,r5
    501c:	39c00017 	ldw	r7,0(r7)
    5020:	110d883a 	add	r6,r2,r4
    5024:	10800104 	addi	r2,r2,4
    5028:	31c00015 	stw	r7,0(r6)
    502c:	003ff906 	br	5014 <_gp+0xffff678c>

00005030 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    5030:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    5034:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    5038:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    503c:	00050bc0 	call	50bc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    5040:	00050dc0 	call	50dc <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    5044:	d1a05317 	ldw	r6,-32436(gp)
    5048:	d1605417 	ldw	r5,-32432(gp)
    504c:	d1205517 	ldw	r4,-32428(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    5050:	dfc00017 	ldw	ra,0(sp)
    5054:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    5058:	00042981 	jmpi	4298 <main>

0000505c <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    505c:	00800044 	movi	r2,1
    5060:	20800226 	beq	r4,r2,506c <write+0x10>
    5064:	00800084 	movi	r2,2
    5068:	2080041e 	bne	r4,r2,507c <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    506c:	01000034 	movhi	r4,0
    5070:	000f883a 	mov	r7,zero
    5074:	211a7804 	addi	r4,r4,27104
    5078:	00062401 	jmpi	6240 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    507c:	d0a00417 	ldw	r2,-32752(gp)
    5080:	10000926 	beq	r2,zero,50a8 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    5084:	deffff04 	addi	sp,sp,-4
    5088:	dfc00015 	stw	ra,0(sp)
    508c:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    5090:	00c01444 	movi	r3,81
    5094:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    5098:	00bfffc4 	movi	r2,-1
    509c:	dfc00017 	ldw	ra,0(sp)
    50a0:	dec00104 	addi	sp,sp,4
    50a4:	f800283a 	ret
    50a8:	d0a05204 	addi	r2,gp,-32440
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    50ac:	00c01444 	movi	r3,81
    50b0:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    50b4:	00bfffc4 	movi	r2,-1
    50b8:	f800283a 	ret

000050bc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    50bc:	deffff04 	addi	sp,sp,-4
    50c0:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    50c4:	00064d80 	call	64d8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    50c8:	00800044 	movi	r2,1
    50cc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    50d0:	dfc00017 	ldw	ra,0(sp)
    50d4:	dec00104 	addi	sp,sp,4
    50d8:	f800283a 	ret

000050dc <alt_sys_init>:
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
    50dc:	01000034 	movhi	r4,0
    50e0:	211a1404 	addi	r4,r4,26704
    50e4:	0005e181 	jmpi	5e18 <alt_avalon_i2c_init>

000050e8 <alt_avalon_i2c_register_optional_irq_handler>:
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
    dev->callback         = callback;
    50e8:	00800034 	movhi	r2,0
    irq->irq_busy=0;
}

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
   irq_data->irq_busy=0;
    50ec:	28000215 	stw	zero,8(r5)
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
    dev->callback         = callback;
    50f0:	10965f04 	addi	r2,r2,22908
    50f4:	20800615 	stw	r2,24(r4)
    dev->callback_context = context;
    50f8:	21400715 	stw	r5,28(r4)
    dev->control          = control;
    50fc:	20000815 	stw	zero,32(r4)
    5100:	f800283a 	ret

00005104 <alt_avalon_i2c_register_callback>:
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
    dev->callback         = callback;
    5104:	21400615 	stw	r5,24(r4)
    dev->callback_context = context;
    5108:	21c00715 	stw	r7,28(r4)
    dev->control          = control;
    510c:	21800815 	stw	r6,32(r4)
    5110:	f800283a 	ret

00005114 <alt_avalon_i2c_open>:
/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
    ALT_AVALON_I2C_DEV_t* dev = NULL;

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
    5114:	d1600204 	addi	r5,gp,-32760
    5118:	000636c1 	jmpi	636c <alt_find_dev>

0000511c <alt_avalon_i2c_enable>:
}

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
    511c:	21400717 	ldw	r5,28(r4)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
    5120:	20800317 	ldw	r2,12(r4)
    5124:	10c00237 	ldwio	r3,8(r2)
   if (enable_status)
    5128:	18c0004c 	andi	r3,r3,1
    512c:	18000b1e 	bne	r3,zero,515c <alt_avalon_i2c_enable+0x40>
   {
     return ALT_AVALON_I2C_BUSY;
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
    5130:	21000617 	ldw	r4,24(r4)
    5134:	00c00034 	movhi	r3,0
    5138:	18d65f04 	addi	r3,r3,22908
    513c:	20c0011e 	bne	r4,r3,5144 <alt_avalon_i2c_enable+0x28>
   {
     irq_data->irq_busy=0;
    5140:	28000215 	stw	zero,8(r5)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
    5144:	10800204 	addi	r2,r2,8
    5148:	10c00037 	ldwio	r3,0(r2)
    514c:	18c00054 	ori	r3,r3,1
    5150:	10c00035 	stwio	r3,0(r2)
    5154:	0005883a 	mov	r2,zero
    5158:	f800283a 	ret
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
   if (enable_status)
   {
     return ALT_AVALON_I2C_BUSY;
    515c:	00bffe44 	movi	r2,-7
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);

   return ALT_AVALON_I2C_SUCCESS;
}
    5160:	f800283a 	ret

00005164 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
    5164:	20800317 	ldw	r2,12(r4)
    5168:	10800204 	addi	r2,r2,8
    516c:	11000037 	ldwio	r4,0(r2)
    5170:	00ffff84 	movi	r3,-2
    5174:	20c6703a 	and	r3,r4,r3
    5178:	10c00035 	stwio	r3,0(r2)
    517c:	f800283a 	ret

00005180 <alt_avalon_i2c_master_config_get>:
/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{

    cfg->addr_mode = i2c_dev->address_mode;
    5180:	20800d17 	ldw	r2,52(r4)
    5184:	28800015 	stw	r2,0(r5)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
    5188:	20800317 	ldw	r2,12(r4)
    518c:	10800237 	ldwio	r2,8(r2)
    5190:	1080008c 	andi	r2,r2,2
    5194:	1005d07a 	srai	r2,r2,1
    5198:	28800115 	stw	r2,4(r5)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
    519c:	20800317 	ldw	r2,12(r4)
    51a0:	10800937 	ldwio	r2,36(r2)
    51a4:	2880020d 	sth	r2,8(r5)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
    51a8:	20800317 	ldw	r2,12(r4)
    51ac:	10800837 	ldwio	r2,32(r2)
    51b0:	2880028d 	sth	r2,10(r5)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
    51b4:	20800317 	ldw	r2,12(r4)
    51b8:	10800a37 	ldwio	r2,40(r2)
    51bc:	2880030d 	sth	r2,12(r5)
    51c0:	f800283a 	ret

000051c4 <alt_avalon_i2c_master_config_set>:
/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
    i2c_dev->address_mode   =   cfg->addr_mode;
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
    51c4:	21800317 	ldw	r6,12(r4)

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
    i2c_dev->address_mode   =   cfg->addr_mode;
    51c8:	28800017 	ldw	r2,0(r5)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
    51cc:	31800204 	addi	r6,r6,8

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
    i2c_dev->address_mode   =   cfg->addr_mode;
    51d0:	20800d15 	stw	r2,52(r4)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
    51d4:	31c00037 	ldwio	r7,0(r6)
    51d8:	00ffff44 	movi	r3,-3
    51dc:	28800117 	ldw	r2,4(r5)
    51e0:	38c6703a 	and	r3,r7,r3
    51e4:	1085883a 	add	r2,r2,r2
    51e8:	1080008c 	andi	r2,r2,2
    51ec:	10c4b03a 	or	r2,r2,r3
    51f0:	30800035 	stwio	r2,0(r6)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
    51f4:	20800317 	ldw	r2,12(r4)
    51f8:	28c0020b 	ldhu	r3,8(r5)
    51fc:	10c00935 	stwio	r3,36(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
    5200:	20800317 	ldw	r2,12(r4)
    5204:	28c0028b 	ldhu	r3,10(r5)
    5208:	10c00835 	stwio	r3,32(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
    520c:	20800317 	ldw	r2,12(r4)
    5210:	28c0030b 	ldhu	r3,12(r5)
    5214:	10c00a35 	stwio	r3,40(r2)
    5218:	f800283a 	ret

0000521c <alt_avalon_i2c_master_config_speed_get>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
    521c:	28c0028b 	ldhu	r3,10(r5)
    5220:	18000f26 	beq	r3,zero,5260 <alt_avalon_i2c_master_config_speed_get+0x44>
    5224:	2940020b 	ldhu	r5,8(r5)
    5228:	28000d26 	beq	r5,zero,5260 <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
    522c:	21000c17 	ldw	r4,48(r4)
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
    5230:	defffe04 	addi	sp,sp,-8
   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   {
       return ALT_AVALON_I2C_BAD_ARG;
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
    5234:	194b883a 	add	r5,r3,r5
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
    5238:	dc000015 	stw	r16,0(sp)
    523c:	dfc00115 	stw	ra,4(sp)
    5240:	3021883a 	mov	r16,r6
   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   {
       return ALT_AVALON_I2C_BAD_ARG;
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
    5244:	0004e6c0 	call	4e6c <__udivsi3>
    5248:	80800015 	stw	r2,0(r16)

   return ALT_AVALON_I2C_SUCCESS;
    524c:	0005883a 	mov	r2,zero
}
    5250:	dfc00117 	ldw	ra,4(sp)
    5254:	dc000017 	ldw	r16,0(sp)
    5258:	dec00204 	addi	sp,sp,8
    525c:	f800283a 	ret
                                                alt_u32 * speed_in_hz)
{

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   {
       return ALT_AVALON_I2C_BAD_ARG;
    5260:	00bfff44 	movi	r2,-3
    5264:	f800283a 	ret

00005268 <alt_avalon_i2c_master_config_speed_set>:
                                                alt_u32 speed_in_hz)
{
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
    5268:	00c001b4 	movhi	r3,6
    526c:	30bfffc4 	addi	r2,r6,-1
    5270:	18c69fc4 	addi	r3,r3,6783
    5274:	18801d36 	bltu	r3,r2,52ec <alt_avalon_i2c_master_config_speed_set+0x84>
    {
        return ALT_AVALON_I2C_RANGE;
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
    5278:	21000c17 	ldw	r4,48(r4)
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
    527c:	defffd04 	addi	sp,sp,-12
    5280:	dc000015 	stw	r16,0(sp)
    5284:	2821883a 	mov	r16,r5
    {
        return ALT_AVALON_I2C_RANGE;
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
    5288:	318b883a 	add	r5,r6,r6
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
    528c:	dc400115 	stw	r17,4(sp)
    5290:	dfc00215 	stw	ra,8(sp)
    5294:	3023883a 	mov	r17,r6
    {
        return ALT_AVALON_I2C_RANGE;
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
    5298:	0004e6c0 	call	4e6c <__udivsi3>

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
    529c:	010000b4 	movhi	r4,2
    52a0:	2121a804 	addi	r4,r4,-31072

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
    52a4:	10c00f04 	addi	r3,r2,60
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
    52a8:	10bff104 	addi	r2,r2,-60

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
    52ac:	2440032e 	bgeu	r4,r17,52bc <alt_avalon_i2c_master_config_speed_set+0x54>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
    52b0:	01000044 	movi	r4,1
    52b4:	81000115 	stw	r4,4(r16)
    52b8:	00000106 	br	52c0 <alt_avalon_i2c_master_config_speed_set+0x58>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
    52bc:	80000115 	stw	zero,4(r16)
    }

    cfg->scl_lcnt = scl_lcnt;
    cfg->scl_hcnt = scl_hcnt;
    52c0:	80c0020d 	sth	r3,8(r16)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
    52c4:	1006d07a 	srli	r3,r2,1
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
    }

    cfg->scl_lcnt = scl_lcnt;
    52c8:	8080028d 	sth	r2,10(r16)
    cfg->scl_hcnt = scl_hcnt;
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
    52cc:	10c5c83a 	sub	r2,r2,r3
    52d0:	8080030d 	sth	r2,12(r16)
    52d4:	0005883a 	mov	r2,zero

    return ALT_AVALON_I2C_SUCCESS;

}
    52d8:	dfc00217 	ldw	ra,8(sp)
    52dc:	dc400117 	ldw	r17,4(sp)
    52e0:	dc000017 	ldw	r16,0(sp)
    52e4:	dec00304 	addi	sp,sp,12
    52e8:	f800283a 	ret
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
    {
        return ALT_AVALON_I2C_RANGE;
    52ec:	00bfff04 	movi	r2,-4
    52f0:	f800283a 	ret

000052f4 <alt_avalon_i2c_is_busy>:
/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
    52f4:	20800317 	ldw	r2,12(r4)
    52f8:	10800537 	ldwio	r2,20(r2)
    {
       return ALT_AVALON_I2C_TRUE;
    }

    return ALT_AVALON_I2C_FALSE;
}
    52fc:	1080004c 	andi	r2,r2,1
    5300:	f800283a 	ret

00005304 <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    5304:	38000015 	stw	zero,0(r7)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    5308:	20c00317 	ldw	r3,12(r4)
    530c:	18800737 	ldwio	r2,28(r3)
    5310:	10000926 	beq	r2,zero,5338 <alt_avalon_i2c_rx_read_available+0x34>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
    5314:	38800017 	ldw	r2,0(r7)
    5318:	2885883a 	add	r2,r5,r2
    531c:	18c00137 	ldwio	r3,4(r3)
    5320:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
    5324:	38800017 	ldw	r2,0(r7)
    5328:	10800044 	addi	r2,r2,1
    532c:	38800015 	stw	r2,0(r7)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    5330:	11bff51e 	bne	r2,r6,5308 <_gp+0xffff6a80>
    5334:	303ff426 	beq	r6,zero,5308 <_gp+0xffff6a80>
    5338:	f800283a 	ret

0000533c <alt_avalon_i2c_rx_read>:
    }
}

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
    533c:	defffb04 	addi	sp,sp,-20
    5340:	dc000015 	stw	r16,0(sp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
    5344:	040000b4 	movhi	r16,2
    }
}

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
    5348:	dcc00315 	stw	r19,12(sp)
    534c:	dc800215 	stw	r18,8(sp)
    5350:	dc400115 	stw	r17,4(sp)
    5354:	dfc00415 	stw	ra,16(sp)
    5358:	2023883a 	mov	r17,r4
    535c:	2825883a 	mov	r18,r5
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
    5360:	8421a804 	addi	r16,r16,-31072
    {
      if (timeout<10) alt_busy_sleep(10000);
    5364:	04c00244 	movi	r19,9
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
    5368:	88800317 	ldw	r2,12(r17)
    536c:	10800737 	ldwio	r2,28(r2)
    5370:	1000071e 	bne	r2,zero,5390 <alt_avalon_i2c_rx_read+0x54>
    {
      if (timeout<10) alt_busy_sleep(10000);
    5374:	9c000236 	bltu	r19,r16,5380 <alt_avalon_i2c_rx_read+0x44>
    5378:	0109c404 	movi	r4,10000
    537c:	00062740 	call	6274 <alt_busy_sleep>
    5380:	843fffc4 	addi	r16,r16,-1
      if (--timeout == 0)
    5384:	803ff81e 	bne	r16,zero,5368 <_gp+0xffff6ae0>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
    5388:	00bfff84 	movi	r2,-2
    538c:	00000106 	br	5394 <alt_avalon_i2c_rx_read+0x58>
}

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    5390:	0005883a 	mov	r2,zero
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
    5394:	88c00317 	ldw	r3,12(r17)
    5398:	18c00137 	ldwio	r3,4(r3)
    539c:	90c00005 	stb	r3,0(r18)
        
    return status;
}
    53a0:	dfc00417 	ldw	ra,16(sp)
    53a4:	dcc00317 	ldw	r19,12(sp)
    53a8:	dc800217 	ldw	r18,8(sp)
    53ac:	dc400117 	ldw	r17,4(sp)
    53b0:	dc000017 	ldw	r16,0(sp)
    53b4:	dec00504 	addi	sp,sp,20
    53b8:	f800283a 	ret

000053bc <alt_avalon_i2c_master_target_get>:
}

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
    *target_addr=i2c_dev->master_target_address;
    53bc:	20800917 	ldw	r2,36(r4)
    53c0:	28800015 	stw	r2,0(r5)
    53c4:	f800283a 	ret

000053c8 <alt_avalon_i2c_master_target_set>:
}

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
    i2c_dev->master_target_address=target_addr;
    53c8:	21400915 	stw	r5,36(r4)
    53cc:	f800283a 	ret

000053d0 <alt_avalon_i2c_check_nack>:
}

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
    53d0:	20800317 	ldw	r2,12(r4)
    53d4:	10800437 	ldwio	r2,16(r2)
    53d8:	1080010c 	andi	r2,r2,4
    53dc:	10000226 	beq	r2,zero,53e8 <alt_avalon_i2c_check_nack+0x18>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
    53e0:	00bffec4 	movi	r2,-5
    53e4:	28800015 	stw	r2,0(r5)
    53e8:	f800283a 	ret

000053ec <alt_avalon_i2c_check_arblost>:
}

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
    53ec:	20800317 	ldw	r2,12(r4)
    53f0:	10800437 	ldwio	r2,16(r2)
    53f4:	1080020c 	andi	r2,r2,8
    53f8:	10000226 	beq	r2,zero,5404 <alt_avalon_i2c_check_arblost+0x18>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
    53fc:	00bffe84 	movi	r2,-6
    5400:	28800015 	stw	r2,0(r5)
    5404:	f800283a 	ret

00005408 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
    5408:	defff804 	addi	sp,sp,-32
    540c:	dd400615 	stw	r21,24(sp)
    5410:	dd000515 	stw	r20,20(sp)
    5414:	dcc00415 	stw	r19,16(sp)
    5418:	dc800315 	stw	r18,12(sp)
    541c:	dc400215 	stw	r17,8(sp)
    5420:	dc000115 	stw	r16,4(sp)
    5424:	dfc00715 	stw	ra,28(sp)
    5428:	2029883a 	mov	r20,r4
    542c:	2823883a 	mov	r17,r5
    5430:	3025883a 	mov	r18,r6
    5434:	3821883a 	mov	r16,r7
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    5438:	d8000015 	stw	zero,0(sp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
    543c:	04c9c404 	movi	r19,10000
    {
      if (timeout<10) alt_busy_sleep(10000);    
    5440:	05400244 	movi	r21,9
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
    5444:	a0c00317 	ldw	r3,12(r20)
    5448:	18800437 	ldwio	r2,16(r3)
    544c:	1080004c 	andi	r2,r2,1
    5450:	1000071e 	bne	r2,zero,5470 <alt_avalon_i2c_cmd_write+0x68>
    {
      if (timeout<10) alt_busy_sleep(10000);    
    5454:	acc00236 	bltu	r21,r19,5460 <alt_avalon_i2c_cmd_write+0x58>
    5458:	0109c404 	movi	r4,10000
    545c:	00062740 	call	6274 <alt_busy_sleep>
    5460:	9cffffc4 	addi	r19,r19,-1
      if (--timeout == 0)
    5464:	983ff71e 	bne	r19,zero,5444 <_gp+0xffff6bbc>
      {
        return ALT_AVALON_I2C_TIMEOUT;
    5468:	00bfff84 	movi	r2,-2
    546c:	00000f06 	br	54ac <alt_avalon_i2c_cmd_write+0xa4>
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
    5470:	94803fcc 	andi	r18,r18,255
    5474:	9024927a 	slli	r18,r18,9
    5478:	84003fcc 	andi	r16,r16,255
    547c:	8020923a 	slli	r16,r16,8
    5480:	8c403fcc 	andi	r17,r17,255
    5484:	9462b03a 	or	r17,r18,r17
    5488:	8c20b03a 	or	r16,r17,r16
    548c:	1c000035 	stwio	r16,0(r3)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
    5490:	d80b883a 	mov	r5,sp
    5494:	a009883a 	mov	r4,r20
    5498:	00053d00 	call	53d0 <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
    549c:	d80b883a 	mov	r5,sp
    54a0:	a009883a 	mov	r4,r20
    54a4:	00053ec0 	call	53ec <alt_avalon_i2c_check_arblost>
    
    return status;
    54a8:	d8800017 	ldw	r2,0(sp)
}
    54ac:	dfc00717 	ldw	ra,28(sp)
    54b0:	dd400617 	ldw	r21,24(sp)
    54b4:	dd000517 	ldw	r20,20(sp)
    54b8:	dcc00417 	ldw	r19,16(sp)
    54bc:	dc800317 	ldw	r18,12(sp)
    54c0:	dc400217 	ldw	r17,8(sp)
    54c4:	dc000117 	ldw	r16,4(sp)
    54c8:	dec00804 	addi	sp,sp,32
    54cc:	f800283a 	ret

000054d0 <alt_avalon_i2c_send_address>:
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
    54d0:	22000d17 	ldw	r8,52(r4)
    54d4:	01c00044 	movi	r7,1
    54d8:	31803fcc 	andi	r6,r6,255
    54dc:	20800917 	ldw	r2,36(r4)
    54e0:	41c0141e 	bne	r8,r7,5534 <alt_avalon_i2c_send_address+0x64>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
    54e4:	10de0014 	ori	r3,r2,30720
    54e8:	1806d1fa 	srli	r3,r3,7
    54ec:	00bfff84 	movi	r2,-2

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
    54f0:	defffe04 	addi	sp,sp,-8
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
    54f4:	1886703a 	and	r3,r3,r2
    54f8:	194ab03a 	or	r5,r3,r5
    54fc:	000f883a 	mov	r7,zero
    5500:	29403fcc 	andi	r5,r5,255

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
    5504:	dc000015 	stw	r16,0(sp)
    5508:	dfc00115 	stw	ra,4(sp)
    550c:	2021883a 	mov	r16,r4
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
    5510:	00054080 	call	5408 <alt_avalon_i2c_cmd_write>
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
    5514:	81400903 	ldbu	r5,36(r16)
    5518:	000f883a 	mov	r7,zero
    551c:	000d883a 	mov	r6,zero
    5520:	8009883a 	mov	r4,r16
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
    }
    
    return status;
}
    5524:	dfc00117 	ldw	ra,4(sp)
    5528:	dc000017 	ldw	r16,0(sp)
    552c:	dec00204 	addi	sp,sp,8
    5530:	00000406 	br	5544 <alt_avalon_i2c_send_address+0x74>
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
    5534:	1085883a 	add	r2,r2,r2
    5538:	114ab03a 	or	r5,r2,r5
    553c:	000f883a 	mov	r7,zero
    5540:	29403fcc 	andi	r5,r5,255
    5544:	00054081 	jmpi	5408 <alt_avalon_i2c_cmd_write>

00005548 <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
    5548:	defff904 	addi	sp,sp,-28
    554c:	dc800315 	stw	r18,12(sp)
    5550:	dfc00615 	stw	ra,24(sp)
    5554:	dd000515 	stw	r20,20(sp)
    5558:	dcc00415 	stw	r19,16(sp)
    555c:	dc400215 	stw	r17,8(sp)
    5560:	dc000115 	stw	r16,4(sp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    5564:	d8000015 	stw	zero,0(sp)
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
    5568:	dc800717 	ldw	r18,28(sp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout=size * 10000;
    
    if (size==0)
    556c:	30003e26 	beq	r6,zero,5668 <alt_avalon_i2c_master_transmit+0x120>
    {
      return ALT_AVALON_I2C_SUCCESS;
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
    5570:	3cc03fcc 	andi	r19,r7,255
    5574:	2021883a 	mov	r16,r4
    5578:	2823883a 	mov	r17,r5
    557c:	3029883a 	mov	r20,r6
    5580:	9800061e 	bne	r19,zero,559c <alt_avalon_i2c_master_transmit+0x54>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
    5584:	000511c0 	call	511c <alt_avalon_i2c_enable>
    5588:	d8800015 	stw	r2,0(sp)
      if (status != ALT_AVALON_I2C_SUCCESS)
    558c:	1000371e 	bne	r2,zero,566c <alt_avalon_i2c_master_transmit+0x124>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
    5590:	80800317 	ldw	r2,12(r16)
    5594:	00c00704 	movi	r3,28
    5598:	10c00435 	stwio	r3,16(r2)
      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
    559c:	980d883a 	mov	r6,r19
    55a0:	000b883a 	mov	r5,zero
    55a4:	8009883a 	mov	r4,r16
    55a8:	00054d00 	call	54d0 <alt_avalon_i2c_send_address>
    55ac:	d8800015 	stw	r2,0(sp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    55b0:	1000171e 	bne	r2,zero,5610 <alt_avalon_i2c_master_transmit+0xc8>
    55b4:	a4ffffc4 	addi	r19,r20,-1
    55b8:	8ce7883a 	add	r19,r17,r19
    55bc:	d8800017 	ldw	r2,0(sp)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
    55c0:	8cc00926 	beq	r17,r19,55e8 <alt_avalon_i2c_master_transmit+0xa0>
    55c4:	1000081e 	bne	r2,zero,55e8 <alt_avalon_i2c_master_transmit+0xa0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
    55c8:	89400003 	ldbu	r5,0(r17)
    55cc:	000f883a 	mov	r7,zero
    55d0:	000d883a 	mov	r6,zero
    55d4:	8009883a 	mov	r4,r16
    55d8:	00054080 	call	5408 <alt_avalon_i2c_cmd_write>
    55dc:	d8800015 	stw	r2,0(sp)
            
            ++buffer;
    55e0:	8c400044 	addi	r17,r17,1
    55e4:	003ff506 	br	55bc <_gp+0xffff6d34>
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
    55e8:	1000091e 	bne	r2,zero,5610 <alt_avalon_i2c_master_transmit+0xc8>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
    55ec:	89400003 	ldbu	r5,0(r17)
    55f0:	94803fcc 	andi	r18,r18,255
    55f4:	900f883a 	mov	r7,r18
    55f8:	000d883a 	mov	r6,zero
    55fc:	8009883a 	mov	r4,r16
    5600:	00054080 	call	5408 <alt_avalon_i2c_cmd_write>
    5604:	d8800015 	stw	r2,0(sp)
            --size;
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    5608:	9000011e 	bne	r18,zero,5610 <alt_avalon_i2c_master_transmit+0xc8>
    560c:	10001426 	beq	r2,zero,5660 <alt_avalon_i2c_master_transmit+0x118>
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout=size * 10000;
    5610:	0149c404 	movi	r5,10000
    5614:	a009883a 	mov	r4,r20
    5618:	0004f280 	call	4f28 <__mulsi3>
    561c:	1023883a 	mov	r17,r2
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);
    5620:	04800244 	movi	r18,9
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
    5624:	8009883a 	mov	r4,r16
    5628:	00052f40 	call	52f4 <alt_avalon_i2c_is_busy>
    562c:	10000726 	beq	r2,zero,564c <alt_avalon_i2c_master_transmit+0x104>
        {
            if (timeout<10) alt_busy_sleep(10000);
    5630:	94400236 	bltu	r18,r17,563c <alt_avalon_i2c_master_transmit+0xf4>
    5634:	0109c404 	movi	r4,10000
    5638:	00062740 	call	6274 <alt_busy_sleep>
            if (--timeout == 0)
    563c:	8c7fffc4 	addi	r17,r17,-1
    5640:	883ff81e 	bne	r17,zero,5624 <_gp+0xffff6d9c>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
    5644:	00bfff84 	movi	r2,-2
    5648:	d8800015 	stw	r2,0(sp)
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
    564c:	8009883a 	mov	r4,r16
    5650:	d80b883a 	mov	r5,sp
    5654:	00053d00 	call	53d0 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
    5658:	8009883a 	mov	r4,r16
    565c:	00051640 	call	5164 <alt_avalon_i2c_disable>
    }


    return status;
    5660:	d8800017 	ldw	r2,0(sp)
    5664:	00000106 	br	566c <alt_avalon_i2c_master_transmit+0x124>
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout=size * 10000;
    
    if (size==0)
    {
      return ALT_AVALON_I2C_SUCCESS;
    5668:	0005883a 	mov	r2,zero
        alt_avalon_i2c_disable(i2c_dev);
    }


    return status;
}
    566c:	dfc00617 	ldw	ra,24(sp)
    5670:	dd000517 	ldw	r20,20(sp)
    5674:	dcc00417 	ldw	r19,16(sp)
    5678:	dc800317 	ldw	r18,12(sp)
    567c:	dc400217 	ldw	r17,8(sp)
    5680:	dc000117 	ldw	r16,4(sp)
    5684:	dec00704 	addi	sp,sp,28
    5688:	f800283a 	ret

0000568c <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
    568c:	defff604 	addi	sp,sp,-40
    5690:	dd000615 	stw	r20,24(sp)
    5694:	dfc00915 	stw	ra,36(sp)
    5698:	dd800815 	stw	r22,32(sp)
    569c:	dd400715 	stw	r21,28(sp)
    56a0:	dcc00515 	stw	r19,20(sp)
    56a4:	dc800415 	stw	r18,16(sp)
    56a8:	dc400315 	stw	r17,12(sp)
    56ac:	dc000215 	stw	r16,8(sp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    56b0:	d8000115 	stw	zero,4(sp)
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
    56b4:	dd000a17 	ldw	r20,40(sp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
    alt_u32 bytes_written=0;
    alt_u32 temp_bytes_read;
    
    if (size==0)
    56b8:	30005626 	beq	r6,zero,5814 <alt_avalon_i2c_master_receive+0x188>
    {
      return ALT_AVALON_I2C_SUCCESS;
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
    56bc:	3c803fcc 	andi	r18,r7,255
    56c0:	2023883a 	mov	r17,r4
    56c4:	2821883a 	mov	r16,r5
    56c8:	3027883a 	mov	r19,r6
    56cc:	9000061e 	bne	r18,zero,56e8 <alt_avalon_i2c_master_receive+0x5c>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
    56d0:	000511c0 	call	511c <alt_avalon_i2c_enable>
    56d4:	d8800115 	stw	r2,4(sp)
      if (status != ALT_AVALON_I2C_SUCCESS)
    56d8:	10004f1e 	bne	r2,zero,5818 <alt_avalon_i2c_master_receive+0x18c>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
    56dc:	88800317 	ldw	r2,12(r17)
    56e0:	00c00704 	movi	r3,28
    56e4:	10c00435 	stwio	r3,16(r2)
      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
    56e8:	900d883a 	mov	r6,r18
    56ec:	01400044 	movi	r5,1
    56f0:	8809883a 	mov	r4,r17
    56f4:	00054d00 	call	54d0 <alt_avalon_i2c_send_address>
    56f8:	d8800115 	stw	r2,4(sp)

    if (status == ALT_AVALON_I2C_SUCCESS)
    56fc:	10001f1e 	bne	r2,zero,577c <alt_avalon_i2c_master_receive+0xf0>
    5700:	002b883a 	mov	r21,zero
    5704:	0025883a 	mov	r18,zero
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
    5708:	9dbfffc4 	addi	r22,r19,-1
    570c:	d8800117 	ldw	r2,4(sp)
    5710:	ad800836 	bltu	r21,r22,5734 <alt_avalon_i2c_master_receive+0xa8>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
    5714:	10001a1e 	bne	r2,zero,5780 <alt_avalon_i2c_master_receive+0xf4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
    5718:	a1c03fcc 	andi	r7,r20,255
    571c:	000d883a 	mov	r6,zero
    5720:	000b883a 	mov	r5,zero
    5724:	8809883a 	mov	r4,r17
    5728:	00054080 	call	5408 <alt_avalon_i2c_cmd_write>
    572c:	d8800115 	stw	r2,4(sp)
    5730:	00001306 	br	5780 <alt_avalon_i2c_master_receive+0xf4>
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
    5734:	103ff71e 	bne	r2,zero,5714 <_gp+0xffff6e8c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
    5738:	000f883a 	mov	r7,zero
    573c:	000d883a 	mov	r6,zero
    5740:	000b883a 	mov	r5,zero
    5744:	8809883a 	mov	r4,r17
    5748:	00054080 	call	5408 <alt_avalon_i2c_cmd_write>
    574c:	d8800115 	stw	r2,4(sp)
            bytes_written++;
    5750:	ad400044 	addi	r21,r21,1
            if (status == ALT_AVALON_I2C_SUCCESS)
    5754:	103fed1e 	bne	r2,zero,570c <_gp+0xffff6e84>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
    5758:	800b883a 	mov	r5,r16
    575c:	d80f883a 	mov	r7,sp
    5760:	000d883a 	mov	r6,zero
    5764:	8809883a 	mov	r4,r17
    5768:	00053040 	call	5304 <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
    576c:	d8800017 	ldw	r2,0(sp)
    5770:	80a1883a 	add	r16,r16,r2
               bytes_read+=temp_bytes_read;
    5774:	90a5883a 	add	r18,r18,r2
    5778:	003fe406 	br	570c <_gp+0xffff6e84>
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout;
    alt_u32 bytes_read=0;
    577c:	0025883a 	mov	r18,zero
    5780:	9425c83a 	sub	r18,r18,r16
    5784:	8485883a 	add	r2,r16,r18
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
    5788:	14c0082e 	bgeu	r2,r19,57ac <alt_avalon_i2c_master_receive+0x120>
    578c:	d8800117 	ldw	r2,4(sp)
    5790:	10000a1e 	bne	r2,zero,57bc <alt_avalon_i2c_master_receive+0x130>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
    5794:	800b883a 	mov	r5,r16
    5798:	8809883a 	mov	r4,r17
    579c:	000533c0 	call	533c <alt_avalon_i2c_rx_read>
    57a0:	d8800115 	stw	r2,4(sp)
        buffer++;
    57a4:	84000044 	addi	r16,r16,1
    57a8:	003ff606 	br	5784 <_gp+0xffff6efc>
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    57ac:	a5003fcc 	andi	r20,r20,255
    57b0:	a000021e 	bne	r20,zero,57bc <alt_avalon_i2c_master_receive+0x130>
    57b4:	d8800117 	ldw	r2,4(sp)
    57b8:	10001426 	beq	r2,zero,580c <alt_avalon_i2c_master_receive+0x180>
    {
        timeout=10000 * size;
    57bc:	0149c404 	movi	r5,10000
    57c0:	9809883a 	mov	r4,r19
    57c4:	0004f280 	call	4f28 <__mulsi3>
    57c8:	1021883a 	mov	r16,r2
        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);
    57cc:	04800244 	movi	r18,9

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
    57d0:	8809883a 	mov	r4,r17
    57d4:	00052f40 	call	52f4 <alt_avalon_i2c_is_busy>
    57d8:	10000726 	beq	r2,zero,57f8 <alt_avalon_i2c_master_receive+0x16c>
        {
            if (timeout<10) alt_busy_sleep(10000);
    57dc:	94000236 	bltu	r18,r16,57e8 <alt_avalon_i2c_master_receive+0x15c>
    57e0:	0109c404 	movi	r4,10000
    57e4:	00062740 	call	6274 <alt_busy_sleep>
            if (--timeout == 0)
    57e8:	843fffc4 	addi	r16,r16,-1
    57ec:	803ff81e 	bne	r16,zero,57d0 <_gp+0xffff6f48>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
    57f0:	00bfff84 	movi	r2,-2
    57f4:	d8800115 	stw	r2,4(sp)
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
    57f8:	8809883a 	mov	r4,r17
    57fc:	d9400104 	addi	r5,sp,4
    5800:	00053d00 	call	53d0 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
    5804:	8809883a 	mov	r4,r17
    5808:	00051640 	call	5164 <alt_avalon_i2c_disable>
    }

    return status;
    580c:	d8800117 	ldw	r2,4(sp)
    5810:	00000106 	br	5818 <alt_avalon_i2c_master_receive+0x18c>
    alt_u32 bytes_written=0;
    alt_u32 temp_bytes_read;
    
    if (size==0)
    {
      return ALT_AVALON_I2C_SUCCESS;
    5814:	0005883a 	mov	r2,zero
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
    }

    return status;
}
    5818:	dfc00917 	ldw	ra,36(sp)
    581c:	dd800817 	ldw	r22,32(sp)
    5820:	dd400717 	ldw	r21,28(sp)
    5824:	dd000617 	ldw	r20,24(sp)
    5828:	dcc00517 	ldw	r19,20(sp)
    582c:	dc800417 	ldw	r18,16(sp)
    5830:	dc400317 	ldw	r17,12(sp)
    5834:	dc000217 	ldw	r16,8(sp)
    5838:	dec00a04 	addi	sp,sp,40
    583c:	f800283a 	ret

00005840 <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
    5840:	20c00317 	ldw	r3,12(r4)
    5844:	19000437 	ldwio	r4,16(r3)
    5848:	18800337 	ldwio	r2,12(r3)
    584c:	2084703a 	and	r2,r4,r2
    5850:	28800015 	stw	r2,0(r5)
    5854:	f800283a 	ret

00005858 <alt_avalon_i2c_int_raw_status_get>:
/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
    5858:	20800317 	ldw	r2,12(r4)
    585c:	10800437 	ldwio	r2,16(r2)
    5860:	28800015 	stw	r2,0(r5)
    5864:	f800283a 	ret

00005868 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
    5868:	20800317 	ldw	r2,12(r4)
    586c:	11400435 	stwio	r5,16(r2)
    5870:	f800283a 	ret

00005874 <alt_avalon_i2c_enabled_ints_get>:
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
    5874:	20800317 	ldw	r2,12(r4)
    5878:	10800337 	ldwio	r2,12(r2)
    587c:	108007cc 	andi	r2,r2,31
    5880:	28800015 	stw	r2,0(r5)
    5884:	f800283a 	ret

00005888 <alt_avalon_i2c_int_disable>:
}

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    5888:	defffc04 	addi	sp,sp,-16
    588c:	dc000115 	stw	r16,4(sp)
    5890:	2821883a 	mov	r16,r5
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
    5894:	d80b883a 	mov	r5,sp
}

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    5898:	dc400215 	stw	r17,8(sp)
    589c:	dfc00315 	stw	ra,12(sp)
    58a0:	2023883a 	mov	r17,r4
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
    58a4:	00058740 	call	5874 <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
    58a8:	d8800017 	ldw	r2,0(sp)
    58ac:	040a303a 	nor	r5,zero,r16
    58b0:	288a703a 	and	r5,r5,r2
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
    58b4:	88800317 	ldw	r2,12(r17)
    58b8:	294007cc 	andi	r5,r5,31
    58bc:	11400335 	stwio	r5,12(r2)
}
    58c0:	dfc00317 	ldw	ra,12(sp)
    58c4:	dc400217 	ldw	r17,8(sp)
    58c8:	dc000117 	ldw	r16,4(sp)
    58cc:	dec00404 	addi	sp,sp,16
    58d0:	f800283a 	ret

000058d4 <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
    58d4:	defffd04 	addi	sp,sp,-12
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
    58d8:	014007c4 	movi	r5,31
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
    58dc:	dc000015 	stw	r16,0(sp)
    58e0:	dfc00215 	stw	ra,8(sp)
    58e4:	2021883a 	mov	r16,r4
    58e8:	dc400115 	stw	r17,4(sp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
    58ec:	00058880 	call	5888 <alt_avalon_i2c_int_disable>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
    58f0:	80800317 	ldw	r2,12(r16)
    58f4:	00c00704 	movi	r3,28
    58f8:	10c00435 	stwio	r3,16(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
    58fc:	80c00617 	ldw	r3,24(r16)
    5900:	18000726 	beq	r3,zero,5920 <alt_avalon_i2c_irq+0x4c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5904:	0023303a 	rdctl	r17,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5908:	00bfff84 	movi	r2,-2
    590c:	8884703a 	and	r2,r17,r2
    5910:	1001703a 	wrctl	status,r2
    {
        cpu_sr = alt_irq_disable_all();
        dev->callback(dev);
    5914:	8009883a 	mov	r4,r16
    5918:	183ee83a 	callr	r3
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    591c:	8801703a 	wrctl	status,r17
        alt_irq_enable_all(cpu_sr);
    }

    return;
}
    5920:	dfc00217 	ldw	ra,8(sp)
    5924:	dc400117 	ldw	r17,4(sp)
    5928:	dc000017 	ldw	r16,0(sp)
    592c:	dec00304 	addi	sp,sp,12
    5930:	f800283a 	ret

00005934 <alt_avalon_i2c_int_enable>:
}

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    5934:	defffc04 	addi	sp,sp,-16
    5938:	dc400215 	stw	r17,8(sp)
    593c:	2823883a 	mov	r17,r5
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
    5940:	d80b883a 	mov	r5,sp
}

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    5944:	dc000115 	stw	r16,4(sp)
    5948:	dfc00315 	stw	ra,12(sp)
    594c:	2021883a 	mov	r16,r4
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
    5950:	00058740 	call	5874 <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
    5954:	d9400017 	ldw	r5,0(sp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
    5958:	80800317 	ldw	r2,12(r16)
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
    enabled_ints |= mask;
    595c:	894ab03a 	or	r5,r17,r5
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
    5960:	294007cc 	andi	r5,r5,31
    5964:	11400335 	stwio	r5,12(r2)
}
    5968:	dfc00317 	ldw	ra,12(sp)
    596c:	dc400217 	ldw	r17,8(sp)
    5970:	dc000117 	ldw	r16,4(sp)
    5974:	dec00404 	addi	sp,sp,16
    5978:	f800283a 	ret

0000597c <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
    597c:	defffb04 	addi	sp,sp,-20
    5980:	dc000115 	stw	r16,4(sp)
   int timeout=100000;
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   IRQ_DATA_t *irq = i2c_dev->callback_context;
    5984:	24000717 	ldw	r16,28(r4)

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
    5988:	dc800315 	stw	r18,12(sp)
    598c:	dc400215 	stw	r17,8(sp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   IRQ_DATA_t *irq = i2c_dev->callback_context;

   if (irq->irq_busy==2)  /*receive request*/
    5990:	84800217 	ldw	r18,8(r16)

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
    5994:	dfc00415 	stw	ra,16(sp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   IRQ_DATA_t *irq = i2c_dev->callback_context;

   if (irq->irq_busy==2)  /*receive request*/
    5998:	00800084 	movi	r2,2

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
    599c:	2023883a 	mov	r17,r4
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   IRQ_DATA_t *irq = i2c_dev->callback_context;

   if (irq->irq_busy==2)  /*receive request*/
    59a0:	90800326 	beq	r18,r2,59b0 <optional_irq_callback+0x34>

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
    59a4:	048000b4 	movhi	r18,2
    59a8:	94a1a804 	addi	r18,r18,-31072
    59ac:	00001506 	br	5a04 <optional_irq_callback+0x88>
   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   IRQ_DATA_t *irq = i2c_dev->callback_context;

   if (irq->irq_busy==2)  /*receive request*/
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
    59b0:	81800117 	ldw	r6,4(r16)
    59b4:	81400017 	ldw	r5,0(r16)
    59b8:	d80f883a 	mov	r7,sp
    59bc:	00053040 	call	5304 <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
    59c0:	d8c00017 	ldw	r3,0(sp)
    59c4:	80800117 	ldw	r2,4(r16)
       irq->buffer+=bytes_read;
    59c8:	81000017 	ldw	r4,0(r16)
   IRQ_DATA_t *irq = i2c_dev->callback_context;

   if (irq->irq_busy==2)  /*receive request*/
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
       irq->size-=bytes_read;
    59cc:	10c5c83a 	sub	r2,r2,r3
       irq->buffer+=bytes_read;
    59d0:	20c7883a 	add	r3,r4,r3
   IRQ_DATA_t *irq = i2c_dev->callback_context;

   if (irq->irq_busy==2)  /*receive request*/
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
       irq->size-=bytes_read;
    59d4:	80800115 	stw	r2,4(r16)
       irq->buffer+=bytes_read;
    59d8:	80c00015 	stw	r3,0(r16)
       if (irq->size > 0)
    59dc:	103ff126 	beq	r2,zero,59a4 <_gp+0xffff711c>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
    59e0:	88800317 	ldw	r2,12(r17)
    59e4:	00c00704 	movi	r3,28
    59e8:	10c00435 	stwio	r3,16(r2)
       if (irq->size > 0)
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
    59ec:	900b883a 	mov	r5,r18
    59f0:	8809883a 	mov	r4,r17
    59f4:	00059340 	call	5934 <alt_avalon_i2c_int_enable>
    59f8:	00000806 	br	5a1c <optional_irq_callback+0xa0>
    59fc:	94bfffc4 	addi	r18,r18,-1
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
    5a00:	90000326 	beq	r18,zero,5a10 <optional_irq_callback+0x94>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    5a04:	8809883a 	mov	r4,r17
    5a08:	00052f40 	call	52f4 <alt_avalon_i2c_is_busy>
    5a0c:	103ffb1e 	bne	r2,zero,59fc <_gp+0xffff7174>
         break;
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
    5a10:	8809883a 	mov	r4,r17
    5a14:	00051640 	call	5164 <alt_avalon_i2c_disable>

    irq->irq_busy=0;
    5a18:	80000215 	stw	zero,8(r16)
}
    5a1c:	dfc00417 	ldw	ra,16(sp)
    5a20:	dc800317 	ldw	r18,12(sp)
    5a24:	dc400217 	ldw	r17,8(sp)
    5a28:	dc000117 	ldw	r16,4(sp)
    5a2c:	dec00504 	addi	sp,sp,20
    5a30:	f800283a 	ret

00005a34 <alt_avalon_i2c_interrupt_transaction_status>:
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
    }
}

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
    5a34:	defff804 	addi	sp,sp,-32
    5a38:	dc400415 	stw	r17,16(sp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
    5a3c:	24400717 	ldw	r17,28(r4)
    alt_u32 timeout=10000 * irq_data->size + 10000;
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
    5a40:	d9400104 	addi	r5,sp,4
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
    }
}

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
    5a44:	dfc00715 	stw	ra,28(sp)
    5a48:	dc800515 	stw	r18,20(sp)
    5a4c:	dc000315 	stw	r16,12(sp)
    5a50:	dcc00615 	stw	r19,24(sp)
    5a54:	2021883a 	mov	r16,r4
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    5a58:	d8000215 	stw	zero,8(sp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
    alt_u32 timeout=10000 * irq_data->size + 10000;
    5a5c:	8c800117 	ldw	r18,4(r17)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
    5a60:	00058740 	call	5874 <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
    5a64:	d9400117 	ldw	r5,4(sp)
    5a68:	8009883a 	mov	r4,r16
    5a6c:	00058880 	call	5888 <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
    5a70:	d9400204 	addi	r5,sp,8
    5a74:	8009883a 	mov	r4,r16
    5a78:	00053d00 	call	53d0 <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    5a7c:	d8c00217 	ldw	r3,8(sp)
    5a80:	88800217 	ldw	r2,8(r17)
    5a84:	18001a26 	beq	r3,zero,5af0 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
    {
      if (irq_data->irq_busy)
    5a88:	10001726 	beq	r2,zero,5ae8 <alt_avalon_i2c_interrupt_transaction_status+0xb4>

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
    alt_u32 timeout=10000 * irq_data->size + 10000;
    5a8c:	91000044 	addi	r4,r18,1
    5a90:	0149c404 	movi	r5,10000
    5a94:	0004f280 	call	4f28 <__mulsi3>
    5a98:	1025883a 	mov	r18,r2
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
              if (timeout<10) alt_busy_sleep(10000);
    5a9c:	04c00244 	movi	r19,9

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
    5aa0:	8009883a 	mov	r4,r16
    5aa4:	00052f40 	call	52f4 <alt_avalon_i2c_is_busy>
    5aa8:	10000726 	beq	r2,zero,5ac8 <alt_avalon_i2c_interrupt_transaction_status+0x94>
        {
              if (timeout<10) alt_busy_sleep(10000);
    5aac:	9c800236 	bltu	r19,r18,5ab8 <alt_avalon_i2c_interrupt_transaction_status+0x84>
    5ab0:	0109c404 	movi	r4,10000
    5ab4:	00062740 	call	6274 <alt_busy_sleep>
              if (--timeout == 0)
    5ab8:	94bfffc4 	addi	r18,r18,-1
    5abc:	903ff81e 	bne	r18,zero,5aa0 <_gp+0xffff7218>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
    5ac0:	00bfff84 	movi	r2,-2
    5ac4:	d8800215 	stw	r2,8(sp)
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
    5ac8:	89400017 	ldw	r5,0(r17)
    5acc:	d80f883a 	mov	r7,sp
    5ad0:	000d883a 	mov	r6,zero
    5ad4:	8009883a 	mov	r4,r16
    5ad8:	00053040 	call	5304 <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
    5adc:	8009883a 	mov	r4,r16
    5ae0:	00051640 	call	5164 <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
    5ae4:	88000215 	stw	zero,8(r17)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
    5ae8:	d8800217 	ldw	r2,8(sp)
    5aec:	00000506 	br	5b04 <alt_avalon_i2c_interrupt_transaction_status+0xd0>
    }
    
    if (irq_data->irq_busy)
    5af0:	10000426 	beq	r2,zero,5b04 <alt_avalon_i2c_interrupt_transaction_status+0xd0>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
    5af4:	d9400117 	ldw	r5,4(sp)
    5af8:	8009883a 	mov	r4,r16
    5afc:	00059340 	call	5934 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
    5b00:	00bffe44 	movi	r2,-7
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
}
    5b04:	dfc00717 	ldw	ra,28(sp)
    5b08:	dcc00617 	ldw	r19,24(sp)
    5b0c:	dc800517 	ldw	r18,20(sp)
    5b10:	dc400417 	ldw	r17,16(sp)
    5b14:	dc000317 	ldw	r16,12(sp)
    5b18:	dec00804 	addi	sp,sp,32
    5b1c:	f800283a 	ret

00005b20 <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
    5b20:	20800317 	ldw	r2,12(r4)
    5b24:	10800237 	ldwio	r2,8(r2)
    5b28:	10800c0c 	andi	r2,r2,48
    5b2c:	1005d13a 	srai	r2,r2,4
    5b30:	28800015 	stw	r2,0(r5)
    5b34:	f800283a 	ret

00005b38 <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
    5b38:	20c00317 	ldw	r3,12(r4)
    5b3c:	18c00204 	addi	r3,r3,8
    5b40:	19000037 	ldwio	r4,0(r3)
    5b44:	00bff3c4 	movi	r2,-49
    5b48:	280a913a 	slli	r5,r5,4
    5b4c:	2084703a 	and	r2,r4,r2
    5b50:	29400c0c 	andi	r5,r5,48
    5b54:	288ab03a 	or	r5,r5,r2
    5b58:	19400035 	stwio	r5,0(r3)
    5b5c:	f800283a 	ret

00005b60 <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
    5b60:	defff704 	addi	sp,sp,-36
    5b64:	dcc00315 	stw	r19,12(sp)
    5b68:	dfc00815 	stw	ra,32(sp)
    5b6c:	ddc00715 	stw	r23,28(sp)
    5b70:	dd800615 	stw	r22,24(sp)
    5b74:	dd400515 	stw	r21,20(sp)
    5b78:	dd000415 	stw	r20,16(sp)
    5b7c:	dc800215 	stw	r18,8(sp)
    5b80:	dc400115 	stw	r17,4(sp)
    5b84:	dc000015 	stw	r16,0(sp)
    5b88:	dcc00917 	ldw	r19,36(sp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
    alt_u32 timeout;
    alt_u32 bytes_written=0;
    
    if (size==0)
    5b8c:	30004926 	beq	r6,zero,5cb4 <alt_avalon_i2c_master_receive_using_interrupts+0x154>
    {
      return ALT_AVALON_I2C_SUCCESS;
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
    5b90:	20c00617 	ldw	r3,24(r4)
    5b94:	00800034 	movhi	r2,0
    5b98:	10965f04 	addi	r2,r2,22908
    5b9c:	2023883a 	mov	r17,r4
    5ba0:	1880461e 	bne	r3,r2,5cbc <alt_avalon_i2c_master_receive_using_interrupts+0x15c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
    5ba4:	3c003fcc 	andi	r16,r7,255
    5ba8:	3025883a 	mov	r18,r6
    5bac:	282b883a 	mov	r21,r5
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
    5bb0:	25000717 	ldw	r20,28(r4)
    {
       return ALT_AVALON_I2C_BAD_ARG;    
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
    5bb4:	8000051e 	bne	r16,zero,5bcc <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
    5bb8:	000511c0 	call	511c <alt_avalon_i2c_enable>
      if (status != ALT_AVALON_I2C_SUCCESS)
    5bbc:	1000401e 	bne	r2,zero,5cc0 <alt_avalon_i2c_master_receive_using_interrupts+0x160>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
    5bc0:	88800317 	ldw	r2,12(r17)
    5bc4:	00c00704 	movi	r3,28
    5bc8:	10c00435 	stwio	r3,16(r2)
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
    5bcc:	800d883a 	mov	r6,r16
    5bd0:	01400044 	movi	r5,1
    5bd4:	8809883a 	mov	r4,r17
    5bd8:	00054d00 	call	54d0 <alt_avalon_i2c_send_address>
    5bdc:	1021883a 	mov	r16,r2

    if (status == ALT_AVALON_I2C_SUCCESS)
    5be0:	1000151e 	bne	r2,zero,5c38 <alt_avalon_i2c_master_receive_using_interrupts+0xd8>
    5be4:	002d883a 	mov	r22,zero
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
    5be8:	95ffffc4 	addi	r23,r18,-1
    5bec:	b5c0092e 	bgeu	r22,r23,5c14 <alt_avalon_i2c_master_receive_using_interrupts+0xb4>
    5bf0:	8000111e 	bne	r16,zero,5c38 <alt_avalon_i2c_master_receive_using_interrupts+0xd8>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
    5bf4:	000f883a 	mov	r7,zero
    5bf8:	000d883a 	mov	r6,zero
    5bfc:	000b883a 	mov	r5,zero
    5c00:	8809883a 	mov	r4,r17
    5c04:	00054080 	call	5408 <alt_avalon_i2c_cmd_write>
    5c08:	1021883a 	mov	r16,r2
            bytes_written++;
    5c0c:	b5800044 	addi	r22,r22,1
    5c10:	003ff606 	br	5bec <_gp+0xffff7364>
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
    5c14:	8000081e 	bne	r16,zero,5c38 <alt_avalon_i2c_master_receive_using_interrupts+0xd8>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
    5c18:	9cc03fcc 	andi	r19,r19,255
    5c1c:	980f883a 	mov	r7,r19
    5c20:	000d883a 	mov	r6,zero
    5c24:	000b883a 	mov	r5,zero
    5c28:	8809883a 	mov	r4,r17
    5c2c:	00054080 	call	5408 <alt_avalon_i2c_cmd_write>
    5c30:	1021883a 	mov	r16,r2
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    5c34:	10001226 	beq	r2,zero,5c80 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        timeout=10000 * size;
    5c38:	9009883a 	mov	r4,r18
    5c3c:	0149c404 	movi	r5,10000
    5c40:	0004f280 	call	4f28 <__mulsi3>
    5c44:	1025883a 	mov	r18,r2
        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);
    5c48:	04c00244 	movi	r19,9
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
    5c4c:	8809883a 	mov	r4,r17
    5c50:	00052f40 	call	52f4 <alt_avalon_i2c_is_busy>
    5c54:	10000626 	beq	r2,zero,5c70 <alt_avalon_i2c_master_receive_using_interrupts+0x110>
        {
            if (timeout<10) alt_busy_sleep(10000);
    5c58:	9c800236 	bltu	r19,r18,5c64 <alt_avalon_i2c_master_receive_using_interrupts+0x104>
    5c5c:	0109c404 	movi	r4,10000
    5c60:	00062740 	call	6274 <alt_busy_sleep>
            if (--timeout == 0)
    5c64:	94bfffc4 	addi	r18,r18,-1
    5c68:	903ff81e 	bne	r18,zero,5c4c <_gp+0xffff73c4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
    5c6c:	043fff84 	movi	r16,-2
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
    5c70:	8809883a 	mov	r4,r17
    5c74:	00051640 	call	5164 <alt_avalon_i2c_disable>
    5c78:	8005883a 	mov	r2,r16
    5c7c:	00001006 	br	5cc0 <alt_avalon_i2c_master_receive_using_interrupts+0x160>
    }
    else
    {
       if (issue_stop)
    5c80:	98000c26 	beq	r19,zero,5cb4 <alt_avalon_i2c_master_receive_using_interrupts+0x154>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
    5c84:	88800317 	ldw	r2,12(r17)
    5c88:	00c00704 	movi	r3,28
    5c8c:	10c00435 	stwio	r3,16(r2)
       if (issue_stop)
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
    5c90:	000b883a 	mov	r5,zero
    5c94:	8809883a 	mov	r4,r17
    5c98:	0005b380 	call	5b38 <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
    5c9c:	01400084 	movi	r5,2
    5ca0:	a1400215 	stw	r5,8(r20)
         
         irq_data->buffer = buffer;
    5ca4:	a5400015 	stw	r21,0(r20)
         irq_data->size = size;
    5ca8:	a4800115 	stw	r18,4(r20)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
    5cac:	8809883a 	mov	r4,r17
    5cb0:	00059340 	call	5934 <alt_avalon_i2c_int_enable>
    5cb4:	0005883a 	mov	r2,zero
    5cb8:	00000106 	br	5cc0 <alt_avalon_i2c_master_receive_using_interrupts+0x160>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
    {
       return ALT_AVALON_I2C_BAD_ARG;    
    5cbc:	00bfff44 	movi	r2,-3
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
       }
    }

    return status;
}
    5cc0:	dfc00817 	ldw	ra,32(sp)
    5cc4:	ddc00717 	ldw	r23,28(sp)
    5cc8:	dd800617 	ldw	r22,24(sp)
    5ccc:	dd400517 	ldw	r21,20(sp)
    5cd0:	dd000417 	ldw	r20,16(sp)
    5cd4:	dcc00317 	ldw	r19,12(sp)
    5cd8:	dc800217 	ldw	r18,8(sp)
    5cdc:	dc400117 	ldw	r17,4(sp)
    5ce0:	dc000017 	ldw	r16,0(sp)
    5ce4:	dec00904 	addi	sp,sp,36
    5ce8:	f800283a 	ret

00005cec <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
    5cec:	defff604 	addi	sp,sp,-40
    5cf0:	ddc00815 	stw	r23,32(sp)
    5cf4:	dd800715 	stw	r22,28(sp)
    5cf8:	dd400615 	stw	r21,24(sp)
    5cfc:	dd000515 	stw	r20,20(sp)
    5d00:	dcc00415 	stw	r19,16(sp)
    5d04:	dc800315 	stw	r18,12(sp)
    5d08:	dc400215 	stw	r17,8(sp)
    5d0c:	dc000115 	stw	r16,4(sp)
    5d10:	dfc00915 	stw	ra,36(sp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    5d14:	39c03fcc 	andi	r7,r7,255
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
    5d18:	2023883a 	mov	r17,r4
    5d1c:	2825883a 	mov	r18,r5
    5d20:	3027883a 	mov	r19,r6
    5d24:	0409c404 	movi	r16,10000
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
    5d28:	053fffc4 	movi	r20,-1
      {
        if (retry<10) alt_busy_sleep(10000);      
    5d2c:	05400244 	movi	r21,9
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
    5d30:	05800044 	movi	r22,1
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
    5d34:	05c00084 	movi	r23,2
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    5d38:	38001926 	beq	r7,zero,5da0 <alt_avalon_i2c_master_rx+0xb4>
    {
      while (retry--) 
    5d3c:	843fffc4 	addi	r16,r16,-1
    5d40:	85001926 	beq	r16,r20,5da8 <alt_avalon_i2c_master_rx+0xbc>
      {
        if (retry<10) alt_busy_sleep(10000);      
    5d44:	ac000236 	bltu	r21,r16,5d50 <alt_avalon_i2c_master_rx+0x64>
    5d48:	0109c404 	movi	r4,10000
    5d4c:	00062740 	call	6274 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
    5d50:	dd800015 	stw	r22,0(sp)
    5d54:	000f883a 	mov	r7,zero
    5d58:	980d883a 	mov	r6,r19
    5d5c:	900b883a 	mov	r5,r18
    5d60:	8809883a 	mov	r4,r17
    5d64:	0005b600 	call	5b60 <alt_avalon_i2c_master_receive_using_interrupts>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
    5d68:	10c001c4 	addi	r3,r2,7
    5d6c:	b8fff32e 	bgeu	r23,r3,5d3c <_gp+0xffff74b4>
    5d70:	00000d06 	br	5da8 <alt_avalon_i2c_master_rx+0xbc>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
    5d74:	ac000236 	bltu	r21,r16,5d80 <alt_avalon_i2c_master_rx+0x94>
    5d78:	0109c404 	movi	r4,10000
    5d7c:	00062740 	call	6274 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
    5d80:	dd800015 	stw	r22,0(sp)
    5d84:	000f883a 	mov	r7,zero
    5d88:	980d883a 	mov	r6,r19
    5d8c:	900b883a 	mov	r5,r18
    5d90:	8809883a 	mov	r4,r17
    5d94:	000568c0 	call	568c <alt_avalon_i2c_master_receive>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
    5d98:	10c001c4 	addi	r3,r2,7
    5d9c:	b8c00236 	bltu	r23,r3,5da8 <alt_avalon_i2c_master_rx+0xbc>
        break;
      }
    }
    else
    {
      while (retry--) 
    5da0:	843fffc4 	addi	r16,r16,-1
    5da4:	853ff31e 	bne	r16,r20,5d74 <_gp+0xffff74ec>
        break;
      }
    }
    
    return status;
}        
    5da8:	dfc00917 	ldw	ra,36(sp)
    5dac:	ddc00817 	ldw	r23,32(sp)
    5db0:	dd800717 	ldw	r22,28(sp)
    5db4:	dd400617 	ldw	r21,24(sp)
    5db8:	dd000517 	ldw	r20,20(sp)
    5dbc:	dcc00417 	ldw	r19,16(sp)
    5dc0:	dc800317 	ldw	r18,12(sp)
    5dc4:	dc400217 	ldw	r17,8(sp)
    5dc8:	dc000117 	ldw	r16,4(sp)
    5dcc:	dec00a04 	addi	sp,sp,40
    5dd0:	f800283a 	ret

00005dd4 <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
    5dd4:	20800317 	ldw	r2,12(r4)
    5dd8:	10800237 	ldwio	r2,8(r2)
    5ddc:	1080030c 	andi	r2,r2,12
    5de0:	1005d0ba 	srai	r2,r2,2
    5de4:	28800015 	stw	r2,0(r5)
    5de8:	f800283a 	ret

00005dec <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
    5dec:	20c00317 	ldw	r3,12(r4)
    5df0:	18c00204 	addi	r3,r3,8
    5df4:	19000037 	ldwio	r4,0(r3)
    5df8:	00bffcc4 	movi	r2,-13
    5dfc:	294b883a 	add	r5,r5,r5
    5e00:	294b883a 	add	r5,r5,r5
    5e04:	2084703a 	and	r2,r4,r2
    5e08:	2940030c 	andi	r5,r5,12
    5e0c:	288ab03a 	or	r5,r5,r2
    5e10:	19400035 	stwio	r5,0(r3)
    5e14:	f800283a 	ret

00005e18 <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
    5e18:	defff804 	addi	sp,sp,-32
    5e1c:	dfc00715 	stw	ra,28(sp)
    5e20:	dc000515 	stw	r16,20(sp)
    5e24:	dc400615 	stw	r17,24(sp)
    5e28:	2021883a 	mov	r16,r4
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
    5e2c:	00051640 	call	5164 <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
    5e30:	014007c4 	movi	r5,31
    5e34:	8009883a 	mov	r4,r16
    5e38:	00058880 	call	5888 <alt_avalon_i2c_int_disable>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
    5e3c:	80800317 	ldw	r2,12(r16)
    5e40:	00c00704 	movi	r3,28
    5e44:	10c00435 	stwio	r3,16(r2)

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
    5e48:	044000c4 	movi	r17,3
    5e4c:	880b883a 	mov	r5,r17
    5e50:	8009883a 	mov	r4,r16
    5e54:	0005dec0 	call	5dec <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
    5e58:	880b883a 	mov	r5,r17
    5e5c:	8009883a 	mov	r4,r16
    5e60:	0005b380 	call	5b38 <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
    5e64:	018000b4 	movhi	r6,2
    5e68:	31a1a804 	addi	r6,r6,-31072
    5e6c:	d9400104 	addi	r5,sp,4
    5e70:	8009883a 	mov	r4,r16
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
    5e74:	d8000215 	stw	zero,8(sp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
    5e78:	d8000115 	stw	zero,4(sp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
    5e7c:	00052680 	call	5268 <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
    5e80:	d9400104 	addi	r5,sp,4
    5e84:	8009883a 	mov	r4,r16
    5e88:	00051c40 	call	51c4 <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
    5e8c:	8009883a 	mov	r4,r16
    5e90:	d1600204 	addi	r5,gp,-32760
    5e94:	00063000 	call	6300 <alt_dev_llist_insert>
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);

    if (!error)
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    5e98:	81400517 	ldw	r5,20(r16)
    5e9c:	81000417 	ldw	r4,16(r16)
    5ea0:	01800034 	movhi	r6,0
    5ea4:	d8000015 	stw	zero,0(sp)
    5ea8:	800f883a 	mov	r7,r16
    5eac:	31963504 	addi	r6,r6,22740
    5eb0:	00063e40 	call	63e4 <alt_ic_isr_register>
        alt_printf("failed to create semaphores\n");
    }

    return;

}
    5eb4:	dfc00717 	ldw	ra,28(sp)
    5eb8:	dc400617 	ldw	r17,24(sp)
    5ebc:	dc000517 	ldw	r16,20(sp)
    5ec0:	dec00804 	addi	sp,sp,32
    5ec4:	f800283a 	ret

00005ec8 <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
    5ec8:	defff804 	addi	sp,sp,-32
    5ecc:	dcc00315 	stw	r19,12(sp)
    5ed0:	dfc00715 	stw	ra,28(sp)
    5ed4:	dd800615 	stw	r22,24(sp)
    5ed8:	dd400515 	stw	r21,20(sp)
    5edc:	dd000415 	stw	r20,16(sp)
    5ee0:	dc800215 	stw	r18,8(sp)
    5ee4:	dc400115 	stw	r17,4(sp)
    5ee8:	dc000015 	stw	r16,0(sp)
    5eec:	dcc00817 	ldw	r19,32(sp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout=size*10000;
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
    
    if (size==0)
    5ef0:	30004726 	beq	r6,zero,6010 <alt_avalon_i2c_master_transmit_using_interrupts+0x148>
    {
      return ALT_AVALON_I2C_SUCCESS;
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
    5ef4:	20c00617 	ldw	r3,24(r4)
    5ef8:	00800034 	movhi	r2,0
    5efc:	10965f04 	addi	r2,r2,22908
    5f00:	2023883a 	mov	r17,r4
    5f04:	1880441e 	bne	r3,r2,6018 <alt_avalon_i2c_master_transmit_using_interrupts+0x150>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
    5f08:	3c003fcc 	andi	r16,r7,255
    5f0c:	2825883a 	mov	r18,r5
    5f10:	3029883a 	mov	r20,r6
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout=size*10000;
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
    5f14:	25400717 	ldw	r21,28(r4)
    {
       return ALT_AVALON_I2C_BAD_ARG;    
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
    5f18:	8000051e 	bne	r16,zero,5f30 <alt_avalon_i2c_master_transmit_using_interrupts+0x68>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
    5f1c:	000511c0 	call	511c <alt_avalon_i2c_enable>
      if (status != ALT_AVALON_I2C_SUCCESS)
    5f20:	10003e1e 	bne	r2,zero,601c <alt_avalon_i2c_master_transmit_using_interrupts+0x154>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
    5f24:	88800317 	ldw	r2,12(r17)
    5f28:	00c00704 	movi	r3,28
    5f2c:	10c00435 	stwio	r3,16(r2)
      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
    5f30:	800d883a 	mov	r6,r16
    5f34:	000b883a 	mov	r5,zero
    5f38:	8809883a 	mov	r4,r17
    5f3c:	00054d00 	call	54d0 <alt_avalon_i2c_send_address>
    5f40:	1021883a 	mov	r16,r2
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    5f44:	1000151e 	bne	r2,zero,5f9c <alt_avalon_i2c_master_transmit_using_interrupts+0xd4>
    5f48:	a5bfffc4 	addi	r22,r20,-1
    5f4c:	95ad883a 	add	r22,r18,r22
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
    5f50:	95800926 	beq	r18,r22,5f78 <alt_avalon_i2c_master_transmit_using_interrupts+0xb0>
    5f54:	8000111e 	bne	r16,zero,5f9c <alt_avalon_i2c_master_transmit_using_interrupts+0xd4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
    5f58:	91400003 	ldbu	r5,0(r18)
    5f5c:	000f883a 	mov	r7,zero
    5f60:	000d883a 	mov	r6,zero
    5f64:	8809883a 	mov	r4,r17
    5f68:	00054080 	call	5408 <alt_avalon_i2c_cmd_write>
    5f6c:	1021883a 	mov	r16,r2
            
            ++buffer;
    5f70:	94800044 	addi	r18,r18,1
    5f74:	003ff606 	br	5f50 <_gp+0xffff76c8>
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
    5f78:	8000081e 	bne	r16,zero,5f9c <alt_avalon_i2c_master_transmit_using_interrupts+0xd4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
    5f7c:	91400003 	ldbu	r5,0(r18)
    5f80:	9cc03fcc 	andi	r19,r19,255
    5f84:	980f883a 	mov	r7,r19
    5f88:	000d883a 	mov	r6,zero
    5f8c:	8809883a 	mov	r4,r17
    5f90:	00054080 	call	5408 <alt_avalon_i2c_cmd_write>
    5f94:	1021883a 	mov	r16,r2
            --size;
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    5f98:	10001226 	beq	r2,zero,5fe4 <alt_avalon_i2c_master_transmit_using_interrupts+0x11c>
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout=size*10000;
    5f9c:	0149c404 	movi	r5,10000
    5fa0:	a009883a 	mov	r4,r20
    5fa4:	0004f280 	call	4f28 <__mulsi3>
    5fa8:	1025883a 	mov	r18,r2
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);        
    5fac:	04c00244 	movi	r19,9
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
    5fb0:	8809883a 	mov	r4,r17
    5fb4:	00052f40 	call	52f4 <alt_avalon_i2c_is_busy>
    5fb8:	10000626 	beq	r2,zero,5fd4 <alt_avalon_i2c_master_transmit_using_interrupts+0x10c>
        {
            if (timeout<10) alt_busy_sleep(10000);        
    5fbc:	9c800236 	bltu	r19,r18,5fc8 <alt_avalon_i2c_master_transmit_using_interrupts+0x100>
    5fc0:	0109c404 	movi	r4,10000
    5fc4:	00062740 	call	6274 <alt_busy_sleep>
            if (--timeout == 0)
    5fc8:	94bfffc4 	addi	r18,r18,-1
    5fcc:	903ff81e 	bne	r18,zero,5fb0 <_gp+0xffff7728>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
    5fd0:	043fff84 	movi	r16,-2
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
    5fd4:	8809883a 	mov	r4,r17
    5fd8:	00051640 	call	5164 <alt_avalon_i2c_disable>
    5fdc:	8005883a 	mov	r2,r16
    5fe0:	00000e06 	br	601c <alt_avalon_i2c_master_transmit_using_interrupts+0x154>
    }
    else
    {
       if (issue_stop)
    5fe4:	98000a26 	beq	r19,zero,6010 <alt_avalon_i2c_master_transmit_using_interrupts+0x148>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
    5fe8:	88800317 	ldw	r2,12(r17)
    5fec:	00c00704 	movi	r3,28
    5ff0:	10c00435 	stwio	r3,16(r2)
       if (issue_stop)
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
    5ff4:	000b883a 	mov	r5,zero
    5ff8:	8809883a 	mov	r4,r17
    5ffc:	0005dec0 	call	5dec <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
    6000:	01400044 	movi	r5,1
    6004:	a9400215 	stw	r5,8(r21)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
    6008:	8809883a 	mov	r4,r17
    600c:	00059340 	call	5934 <alt_avalon_i2c_int_enable>
    6010:	0005883a 	mov	r2,zero
    6014:	00000106 	br	601c <alt_avalon_i2c_master_transmit_using_interrupts+0x154>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
    {
       return ALT_AVALON_I2C_BAD_ARG;    
    6018:	00bfff44 	movi	r2,-3
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
       }
    }
    
    return status;
}
    601c:	dfc00717 	ldw	ra,28(sp)
    6020:	dd800617 	ldw	r22,24(sp)
    6024:	dd400517 	ldw	r21,20(sp)
    6028:	dd000417 	ldw	r20,16(sp)
    602c:	dcc00317 	ldw	r19,12(sp)
    6030:	dc800217 	ldw	r18,8(sp)
    6034:	dc400117 	ldw	r17,4(sp)
    6038:	dc000017 	ldw	r16,0(sp)
    603c:	dec00804 	addi	sp,sp,32
    6040:	f800283a 	ret

00006044 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
    6044:	defff504 	addi	sp,sp,-44
    6048:	df000915 	stw	fp,36(sp)
    604c:	ddc00815 	stw	r23,32(sp)
    6050:	dd800715 	stw	r22,28(sp)
    6054:	dd400615 	stw	r21,24(sp)
    6058:	dd000515 	stw	r20,20(sp)
    605c:	dcc00415 	stw	r19,16(sp)
    6060:	dc800315 	stw	r18,12(sp)
    6064:	dc400215 	stw	r17,8(sp)
    6068:	dc000115 	stw	r16,4(sp)
    606c:	dfc00a15 	stw	ra,40(sp)
    6070:	2023883a 	mov	r17,r4
    6074:	2825883a 	mov	r18,r5
    6078:	3027883a 	mov	r19,r6
    607c:	382d883a 	mov	r22,r7
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    6080:	0409c404 	movi	r16,10000
    
    while (retry--)
    6084:	057fffc4 	movi	r21,-1
    {
      if (retry<10) alt_busy_sleep(10000);
    6088:	05c00244 	movi	r23,9
    608c:	05000044 	movi	r20,1
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
    6090:	07000084 	movi	fp,2
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
    6094:	843fffc4 	addi	r16,r16,-1
    6098:	85400f26 	beq	r16,r21,60d8 <alt_avalon_i2c_master_tx+0x94>
    {
      if (retry<10) alt_busy_sleep(10000);
    609c:	bc000236 	bltu	r23,r16,60a8 <alt_avalon_i2c_master_tx+0x64>
    60a0:	0109c404 	movi	r4,10000
    60a4:	00062740 	call	6274 <alt_busy_sleep>
      if (use_interrupts)
    60a8:	b0803fcc 	andi	r2,r22,255
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
    60ac:	dd000015 	stw	r20,0(sp)
    60b0:	000f883a 	mov	r7,zero
    60b4:	980d883a 	mov	r6,r19
    60b8:	900b883a 	mov	r5,r18
    60bc:	8809883a 	mov	r4,r17
    alt_u32 retry=10000;  
    
    while (retry--)
    {
      if (retry<10) alt_busy_sleep(10000);
      if (use_interrupts)
    60c0:	10000226 	beq	r2,zero,60cc <alt_avalon_i2c_master_tx+0x88>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
    60c4:	0005ec80 	call	5ec8 <alt_avalon_i2c_master_transmit_using_interrupts>
    60c8:	00000106 	br	60d0 <alt_avalon_i2c_master_tx+0x8c>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
    60cc:	00055480 	call	5548 <alt_avalon_i2c_master_transmit>
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
    60d0:	10c001c4 	addi	r3,r2,7
    60d4:	e0ffef2e 	bgeu	fp,r3,6094 <_gp+0xffff780c>
      break;
    }

    return status;
}        
    60d8:	dfc00a17 	ldw	ra,40(sp)
    60dc:	df000917 	ldw	fp,36(sp)
    60e0:	ddc00817 	ldw	r23,32(sp)
    60e4:	dd800717 	ldw	r22,28(sp)
    60e8:	dd400617 	ldw	r21,24(sp)
    60ec:	dd000517 	ldw	r20,20(sp)
    60f0:	dcc00417 	ldw	r19,16(sp)
    60f4:	dc800317 	ldw	r18,12(sp)
    60f8:	dc400217 	ldw	r17,8(sp)
    60fc:	dc000117 	ldw	r16,4(sp)
    6100:	dec00b04 	addi	sp,sp,44
    6104:	f800283a 	ret

00006108 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
    6108:	defff504 	addi	sp,sp,-44
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    610c:	d8c00c03 	ldbu	r3,48(sp)
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
    6110:	df000915 	stw	fp,36(sp)
    6114:	ddc00815 	stw	r23,32(sp)
    6118:	dd800715 	stw	r22,28(sp)
    611c:	dd400615 	stw	r21,24(sp)
    6120:	dd000515 	stw	r20,20(sp)
    6124:	dcc00415 	stw	r19,16(sp)
    6128:	dc800315 	stw	r18,12(sp)
    612c:	dc400215 	stw	r17,8(sp)
    6130:	dc000115 	stw	r16,4(sp)
    6134:	dfc00a15 	stw	ra,40(sp)
    6138:	2023883a 	mov	r17,r4
    613c:	2825883a 	mov	r18,r5
    6140:	3027883a 	mov	r19,r6
    6144:	3829883a 	mov	r20,r7
    6148:	0409c404 	movi	r16,10000
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
    614c:	05bfffc4 	movi	r22,-1
      {
        if (retry<10) alt_busy_sleep(10000);      
    6150:	05c00244 	movi	r23,9
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
    6154:	05400084 	movi	r21,2
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
    6158:	07000044 	movi	fp,1
                                       const alt_u8 use_interrupts)                                       
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    615c:	18002126 	beq	r3,zero,61e4 <alt_avalon_i2c_master_tx_rx+0xdc>
    {
      while (retry--) 
    6160:	843fffc4 	addi	r16,r16,-1
    6164:	85802a26 	beq	r16,r22,6210 <alt_avalon_i2c_master_tx_rx+0x108>
      {
        if (retry<10) alt_busy_sleep(10000);      
    6168:	bc000236 	bltu	r23,r16,6174 <alt_avalon_i2c_master_tx_rx+0x6c>
    616c:	0109c404 	movi	r4,10000
    6170:	00062740 	call	6274 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
    6174:	d8000015 	stw	zero,0(sp)
    6178:	000f883a 	mov	r7,zero
    617c:	980d883a 	mov	r6,r19
    6180:	900b883a 	mov	r5,r18
    6184:	8809883a 	mov	r4,r17
    6188:	0005ec80 	call	5ec8 <alt_avalon_i2c_master_transmit_using_interrupts>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
    618c:	10c001c4 	addi	r3,r2,7
    6190:	a8fff32e 	bgeu	r21,r3,6160 <_gp+0xffff78d8>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
    6194:	d9800b17 	ldw	r6,44(sp)
    6198:	df000015 	stw	fp,0(sp)
    619c:	01c00044 	movi	r7,1
    61a0:	a00b883a 	mov	r5,r20
    61a4:	8809883a 	mov	r4,r17
    61a8:	0005b600 	call	5b60 <alt_avalon_i2c_master_receive_using_interrupts>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
    61ac:	10c001c4 	addi	r3,r2,7
    61b0:	a8ffeb2e 	bgeu	r21,r3,6160 <_gp+0xffff78d8>
    61b4:	00001606 	br	6210 <alt_avalon_i2c_master_tx_rx+0x108>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
    61b8:	bc000236 	bltu	r23,r16,61c4 <alt_avalon_i2c_master_tx_rx+0xbc>
    61bc:	0109c404 	movi	r4,10000
    61c0:	00062740 	call	6274 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
    61c4:	d8000015 	stw	zero,0(sp)
    61c8:	000f883a 	mov	r7,zero
    61cc:	980d883a 	mov	r6,r19
    61d0:	900b883a 	mov	r5,r18
    61d4:	8809883a 	mov	r4,r17
    61d8:	00055480 	call	5548 <alt_avalon_i2c_master_transmit>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
    61dc:	10c001c4 	addi	r3,r2,7
    61e0:	a8c00336 	bltu	r21,r3,61f0 <alt_avalon_i2c_master_tx_rx+0xe8>
        break;
      }
    }
    else 
    {
      while (retry--) 
    61e4:	843fffc4 	addi	r16,r16,-1
    61e8:	85bff31e 	bne	r16,r22,61b8 <_gp+0xffff7930>
    61ec:	00000806 	br	6210 <alt_avalon_i2c_master_tx_rx+0x108>
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
    61f0:	d9800b17 	ldw	r6,44(sp)
    61f4:	df000015 	stw	fp,0(sp)
    61f8:	01c00044 	movi	r7,1
    61fc:	a00b883a 	mov	r5,r20
    6200:	8809883a 	mov	r4,r17
    6204:	000568c0 	call	568c <alt_avalon_i2c_master_receive>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
    6208:	10c001c4 	addi	r3,r2,7
    620c:	a8fff52e 	bgeu	r21,r3,61e4 <_gp+0xffff795c>
        break;
      }
    }
    
    return status;
}                                       
    6210:	dfc00a17 	ldw	ra,40(sp)
    6214:	df000917 	ldw	fp,36(sp)
    6218:	ddc00817 	ldw	r23,32(sp)
    621c:	dd800717 	ldw	r22,28(sp)
    6220:	dd400617 	ldw	r21,24(sp)
    6224:	dd000517 	ldw	r20,20(sp)
    6228:	dcc00417 	ldw	r19,16(sp)
    622c:	dc800317 	ldw	r18,12(sp)
    6230:	dc400217 	ldw	r17,8(sp)
    6234:	dc000117 	ldw	r16,4(sp)
    6238:	dec00b04 	addi	sp,sp,44
    623c:	f800283a 	ret

00006240 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    6240:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    6244:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    6248:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    624c:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    6250:	2980072e 	bgeu	r5,r6,6270 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    6254:	38c00037 	ldwio	r3,0(r7)
    6258:	18ffffec 	andhi	r3,r3,65535
    625c:	183ffc26 	beq	r3,zero,6250 <_gp+0xffff79c8>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    6260:	28c00007 	ldb	r3,0(r5)
    6264:	20c00035 	stwio	r3,0(r4)
    6268:	29400044 	addi	r5,r5,1
    626c:	003ff806 	br	6250 <_gp+0xffff79c8>

  return count;
}
    6270:	f800283a 	ret

00006274 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    6274:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    6278:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    627c:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    6280:	dc000015 	stw	r16,0(sp)
    6284:	dfc00115 	stw	ra,4(sp)
    6288:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    628c:	0004e6c0 	call	4e6c <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    6290:	10001026 	beq	r2,zero,62d4 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    6294:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    6298:	013999b4 	movhi	r4,58982
    629c:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    62a0:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    62a4:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    62a8:	297fffc4 	addi	r5,r5,-1
    62ac:	283ffe1e 	bne	r5,zero,62a8 <_gp+0xffff7a20>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    62b0:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    62b4:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    62b8:	18bffb16 	blt	r3,r2,62a8 <_gp+0xffff7a20>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    62bc:	01400144 	movi	r5,5
    62c0:	8009883a 	mov	r4,r16
    62c4:	0004f280 	call	4f28 <__mulsi3>
    62c8:	10bfffc4 	addi	r2,r2,-1
    62cc:	103ffe1e 	bne	r2,zero,62c8 <_gp+0xffff7a40>
    62d0:	00000506 	br	62e8 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    62d4:	01400144 	movi	r5,5
    62d8:	8009883a 	mov	r4,r16
    62dc:	0004f280 	call	4f28 <__mulsi3>
    62e0:	10bfffc4 	addi	r2,r2,-1
    62e4:	00bffe16 	blt	zero,r2,62e0 <_gp+0xffff7a58>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    62e8:	0005883a 	mov	r2,zero
    62ec:	dfc00117 	ldw	ra,4(sp)
    62f0:	dc000017 	ldw	r16,0(sp)
    62f4:	dec00204 	addi	sp,sp,8
    62f8:	f800283a 	ret

000062fc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    62fc:	f800283a 	ret

00006300 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    6300:	20000226 	beq	r4,zero,630c <alt_dev_llist_insert+0xc>
    6304:	20800217 	ldw	r2,8(r4)
    6308:	1000101e 	bne	r2,zero,634c <alt_dev_llist_insert+0x4c>
    630c:	d0a00417 	ldw	r2,-32752(gp)
    6310:	10000926 	beq	r2,zero,6338 <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    6314:	deffff04 	addi	sp,sp,-4
    6318:	dfc00015 	stw	ra,0(sp)
    631c:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
    6320:	00c00584 	movi	r3,22
    6324:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    6328:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    632c:	dfc00017 	ldw	ra,0(sp)
    6330:	dec00104 	addi	sp,sp,4
    6334:	f800283a 	ret
    6338:	d0a05204 	addi	r2,gp,-32440
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
    633c:	00c00584 	movi	r3,22
    6340:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    6344:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    6348:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
    634c:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    6350:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
    6354:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
    6358:	28800017 	ldw	r2,0(r5)
    635c:	11000115 	stw	r4,4(r2)
  list->next           = entry;
    6360:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
    6364:	0005883a 	mov	r2,zero
    6368:	f800283a 	ret

0000636c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    636c:	defffb04 	addi	sp,sp,-20
    6370:	dcc00315 	stw	r19,12(sp)
    6374:	dc800215 	stw	r18,8(sp)
    6378:	dc400115 	stw	r17,4(sp)
    637c:	dc000015 	stw	r16,0(sp)
    6380:	dfc00415 	stw	ra,16(sp)
    6384:	2027883a 	mov	r19,r4
    6388:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
    638c:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
    6390:	00046940 	call	4694 <strlen>
    6394:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    6398:	84400726 	beq	r16,r17,63b8 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    639c:	81000217 	ldw	r4,8(r16)
    63a0:	900d883a 	mov	r6,r18
    63a4:	980b883a 	mov	r5,r19
    63a8:	00065540 	call	6554 <memcmp>
    63ac:	10000426 	beq	r2,zero,63c0 <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    63b0:	84000017 	ldw	r16,0(r16)
    63b4:	003ff806 	br	6398 <_gp+0xffff7b10>
  }
  
  /* No match found */
  
  return NULL;
    63b8:	0005883a 	mov	r2,zero
    63bc:	00000106 	br	63c4 <alt_find_dev+0x58>
    63c0:	8005883a 	mov	r2,r16
}
    63c4:	dfc00417 	ldw	ra,16(sp)
    63c8:	dcc00317 	ldw	r19,12(sp)
    63cc:	dc800217 	ldw	r18,8(sp)
    63d0:	dc400117 	ldw	r17,4(sp)
    63d4:	dc000017 	ldw	r16,0(sp)
    63d8:	dec00504 	addi	sp,sp,20
    63dc:	f800283a 	ret

000063e0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    63e0:	f800283a 	ret

000063e4 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    63e4:	00064701 	jmpi	6470 <alt_iic_isr_register>

000063e8 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    63e8:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    63ec:	00bfff84 	movi	r2,-2
    63f0:	2084703a 	and	r2,r4,r2
    63f4:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    63f8:	00c00044 	movi	r3,1
    63fc:	d0a05717 	ldw	r2,-32420(gp)
    6400:	194a983a 	sll	r5,r3,r5
    6404:	288ab03a 	or	r5,r5,r2
    6408:	d1605715 	stw	r5,-32420(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    640c:	d0a05717 	ldw	r2,-32420(gp)
    6410:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6414:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
    6418:	0005883a 	mov	r2,zero
    641c:	f800283a 	ret

00006420 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6420:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6424:	00bfff84 	movi	r2,-2
    6428:	2084703a 	and	r2,r4,r2
    642c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    6430:	00ffff84 	movi	r3,-2
    6434:	d0a05717 	ldw	r2,-32420(gp)
    6438:	194a183a 	rol	r5,r3,r5
    643c:	288a703a 	and	r5,r5,r2
    6440:	d1605715 	stw	r5,-32420(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    6444:	d0a05717 	ldw	r2,-32420(gp)
    6448:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    644c:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
    6450:	0005883a 	mov	r2,zero
    6454:	f800283a 	ret

00006458 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    6458:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
    645c:	00800044 	movi	r2,1
    6460:	1144983a 	sll	r2,r2,r5
    6464:	10c4703a 	and	r2,r2,r3
}
    6468:	1004c03a 	cmpne	r2,r2,zero
    646c:	f800283a 	ret

00006470 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
    6470:	00c007c4 	movi	r3,31
    6474:	19401616 	blt	r3,r5,64d0 <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    6478:	defffe04 	addi	sp,sp,-8
    647c:	dfc00115 	stw	ra,4(sp)
    6480:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6484:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6488:	00ffff84 	movi	r3,-2
    648c:	80c6703a 	and	r3,r16,r3
    6490:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    6494:	280490fa 	slli	r2,r5,3
    6498:	00c00034 	movhi	r3,0
    649c:	18da7b04 	addi	r3,r3,27116
    64a0:	1885883a 	add	r2,r3,r2
    64a4:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
    64a8:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    64ac:	30000226 	beq	r6,zero,64b8 <alt_iic_isr_register+0x48>
    64b0:	00063e80 	call	63e8 <alt_ic_irq_enable>
    64b4:	00000106 	br	64bc <alt_iic_isr_register+0x4c>
    64b8:	00064200 	call	6420 <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    64bc:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
    64c0:	dfc00117 	ldw	ra,4(sp)
    64c4:	dc000017 	ldw	r16,0(sp)
    64c8:	dec00204 	addi	sp,sp,8
    64cc:	f800283a 	ret
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
    64d0:	00bffa84 	movi	r2,-22
    64d4:	f800283a 	ret

000064d8 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    64d8:	000170fa 	wrctl	ienable,zero
    64dc:	f800283a 	ret

000064e0 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
    64e0:	213ffe84 	addi	r4,r4,-6
    64e4:	008003c4 	movi	r2,15
    64e8:	11001636 	bltu	r2,r4,6544 <alt_exception_cause_generated_bad_addr+0x64>
    64ec:	200890ba 	slli	r4,r4,2
    64f0:	00800034 	movhi	r2,0
    64f4:	10994104 	addi	r2,r2,25860
    64f8:	2089883a 	add	r4,r4,r2
    64fc:	20800017 	ldw	r2,0(r4)
    6500:	1000683a 	jmp	r2
    6504:	0000654c 	andi	zero,zero,405
    6508:	0000654c 	andi	zero,zero,405
    650c:	00006544 	movi	zero,405
    6510:	00006544 	movi	zero,405
    6514:	00006544 	movi	zero,405
    6518:	0000654c 	andi	zero,zero,405
    651c:	00006544 	movi	zero,405
    6520:	00006544 	movi	zero,405
    6524:	0000654c 	andi	zero,zero,405
    6528:	0000654c 	andi	zero,zero,405
    652c:	00006544 	movi	zero,405
    6530:	0000654c 	andi	zero,zero,405
    6534:	00006544 	movi	zero,405
    6538:	00006544 	movi	zero,405
    653c:	00006544 	movi	zero,405
    6540:	0000654c 	andi	zero,zero,405
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    6544:	0005883a 	mov	r2,zero
    6548:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    654c:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
    6550:	f800283a 	ret

00006554 <memcmp>:
    6554:	218d883a 	add	r6,r4,r6
    6558:	21800826 	beq	r4,r6,657c <memcmp+0x28>
    655c:	20800003 	ldbu	r2,0(r4)
    6560:	28c00003 	ldbu	r3,0(r5)
    6564:	10c00226 	beq	r2,r3,6570 <memcmp+0x1c>
    6568:	10c5c83a 	sub	r2,r2,r3
    656c:	f800283a 	ret
    6570:	21000044 	addi	r4,r4,1
    6574:	29400044 	addi	r5,r5,1
    6578:	003ff706 	br	6558 <_gp+0xffff7cd0>
    657c:	0005883a 	mov	r2,zero
    6580:	f800283a 	ret
